# Generated from Graphly.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3B")
        buf.write("\u04ef\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\3\2\7\2D\n\2\f\2\16\2G\13\2\3\2")
        buf.write("\3\2\6\2K\n\2\r\2\16\2L\7\2O\n\2\f\2\16\2R\13\2\3\2\7")
        buf.write("\2U\n\2\f\2\16\2X\13\2\3\2\3\2\7\2\\\n\2\f\2\16\2_\13")
        buf.write("\2\3\2\6\2b\n\2\r\2\16\2c\3\2\3\2\7\2h\n\2\f\2\16\2k\13")
        buf.write("\2\7\2m\n\2\f\2\16\2p\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\7\3\u0081\n\3\f\3\16")
        buf.write("\3\u0084\13\3\5\3\u0086\n\3\3\4\7\4\u0089\n\4\f\4\16\4")
        buf.write("\u008c\13\4\3\4\3\4\7\4\u0090\n\4\f\4\16\4\u0093\13\4")
        buf.write("\3\4\3\4\7\4\u0097\n\4\f\4\16\4\u009a\13\4\3\5\3\5\6\5")
        buf.write("\u009e\n\5\r\5\16\5\u009f\3\5\3\5\6\5\u00a4\n\5\r\5\16")
        buf.write("\5\u00a5\3\5\3\5\6\5\u00aa\n\5\r\5\16\5\u00ab\3\5\3\5")
        buf.write("\6\5\u00b0\n\5\r\5\16\5\u00b1\3\5\3\5\6\5\u00b6\n\5\r")
        buf.write("\5\16\5\u00b7\3\5\3\5\6\5\u00bc\n\5\r\5\16\5\u00bd\3\5")
        buf.write("\3\5\6\5\u00c2\n\5\r\5\16\5\u00c3\3\5\3\5\6\5\u00c8\n")
        buf.write("\5\r\5\16\5\u00c9\3\5\3\5\7\5\u00ce\n\5\f\5\16\5\u00d1")
        buf.write("\13\5\3\5\3\5\3\5\7\5\u00d6\n\5\f\5\16\5\u00d9\13\5\3")
        buf.write("\5\3\5\3\6\7\6\u00de\n\6\f\6\16\6\u00e1\13\6\3\6\3\6\6")
        buf.write("\6\u00e5\n\6\r\6\16\6\u00e6\3\6\3\6\3\6\6\6\u00ec\n\6")
        buf.write("\r\6\16\6\u00ed\3\6\3\6\6\6\u00f2\n\6\r\6\16\6\u00f3\3")
        buf.write("\6\7\6\u00f7\n\6\f\6\16\6\u00fa\13\6\3\6\7\6\u00fd\n\6")
        buf.write("\f\6\16\6\u0100\13\6\3\6\3\6\6\6\u0104\n\6\r\6\16\6\u0105")
        buf.write("\3\6\3\6\3\6\5\6\u010b\n\6\3\6\7\6\u010e\n\6\f\6\16\6")
        buf.write("\u0111\13\6\3\6\3\6\3\7\3\7\6\7\u0117\n\7\r\7\16\7\u0118")
        buf.write("\3\7\3\7\3\7\7\7\u011e\n\7\f\7\16\7\u0121\13\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u012d\n\b\3\t\7\t")
        buf.write("\u0130\n\t\f\t\16\t\u0133\13\t\3\t\3\t\6\t\u0137\n\t\r")
        buf.write("\t\16\t\u0138\3\t\3\t\7\t\u013d\n\t\f\t\16\t\u0140\13")
        buf.write("\t\3\t\3\t\7\t\u0144\n\t\f\t\16\t\u0147\13\t\3\t\3\t\7")
        buf.write("\t\u014b\n\t\f\t\16\t\u014e\13\t\3\t\3\t\7\t\u0152\n\t")
        buf.write("\f\t\16\t\u0155\13\t\3\t\3\t\3\n\7\n\u015a\n\n\f\n\16")
        buf.write("\n\u015d\13\n\3\n\3\n\6\n\u0161\n\n\r\n\16\n\u0162\3\n")
        buf.write("\3\n\7\n\u0167\n\n\f\n\16\n\u016a\13\n\3\n\3\n\7\n\u016e")
        buf.write("\n\n\f\n\16\n\u0171\13\n\3\n\3\n\7\n\u0175\n\n\f\n\16")
        buf.write("\n\u0178\13\n\3\n\3\n\7\n\u017c\n\n\f\n\16\n\u017f\13")
        buf.write("\n\3\n\3\n\7\n\u0183\n\n\f\n\16\n\u0186\13\n\3\n\3\n\7")
        buf.write("\n\u018a\n\n\f\n\16\n\u018d\13\n\3\n\3\n\3\13\7\13\u0192")
        buf.write("\n\13\f\13\16\13\u0195\13\13\3\13\3\13\6\13\u0199\n\13")
        buf.write("\r\13\16\13\u019a\3\13\3\13\7\13\u019f\n\13\f\13\16\13")
        buf.write("\u01a2\13\13\3\13\3\13\7\13\u01a6\n\13\f\13\16\13\u01a9")
        buf.write("\13\13\3\13\3\13\7\13\u01ad\n\13\f\13\16\13\u01b0\13\13")
        buf.write("\3\13\3\13\6\13\u01b4\n\13\r\13\16\13\u01b5\3\13\3\13")
        buf.write("\3\f\7\f\u01bb\n\f\f\f\16\f\u01be\13\f\3\f\3\f\6\f\u01c2")
        buf.write("\n\f\r\f\16\f\u01c3\3\f\3\f\7\f\u01c8\n\f\f\f\16\f\u01cb")
        buf.write("\13\f\3\f\3\f\7\f\u01cf\n\f\f\f\16\f\u01d2\13\f\3\f\3")
        buf.write("\f\7\f\u01d6\n\f\f\f\16\f\u01d9\13\f\3\f\3\f\7\f\u01dd")
        buf.write("\n\f\f\f\16\f\u01e0\13\f\3\f\3\f\3\r\7\r\u01e5\n\r\f\r")
        buf.write("\16\r\u01e8\13\r\3\r\3\r\6\r\u01ec\n\r\r\r\16\r\u01ed")
        buf.write("\3\r\3\r\7\r\u01f2\n\r\f\r\16\r\u01f5\13\r\3\r\3\r\7\r")
        buf.write("\u01f9\n\r\f\r\16\r\u01fc\13\r\3\r\3\r\3\16\7\16\u0201")
        buf.write("\n\16\f\16\16\16\u0204\13\16\3\16\3\16\6\16\u0208\n\16")
        buf.write("\r\16\16\16\u0209\3\16\3\16\7\16\u020e\n\16\f\16\16\16")
        buf.write("\u0211\13\16\3\16\3\16\7\16\u0215\n\16\f\16\16\16\u0218")
        buf.write("\13\16\3\16\3\16\7\16\u021c\n\16\f\16\16\16\u021f\13\16")
        buf.write("\3\16\3\16\7\16\u0223\n\16\f\16\16\16\u0226\13\16\3\16")
        buf.write("\3\16\3\17\7\17\u022b\n\17\f\17\16\17\u022e\13\17\3\17")
        buf.write("\3\17\6\17\u0232\n\17\r\17\16\17\u0233\3\17\3\17\7\17")
        buf.write("\u0238\n\17\f\17\16\17\u023b\13\17\3\17\3\17\7\17\u023f")
        buf.write("\n\17\f\17\16\17\u0242\13\17\3\17\3\17\7\17\u0246\n\17")
        buf.write("\f\17\16\17\u0249\13\17\3\17\3\17\7\17\u024d\n\17\f\17")
        buf.write("\16\17\u0250\13\17\3\17\3\17\3\20\7\20\u0255\n\20\f\20")
        buf.write("\16\20\u0258\13\20\3\20\3\20\6\20\u025c\n\20\r\20\16\20")
        buf.write("\u025d\3\20\3\20\7\20\u0262\n\20\f\20\16\20\u0265\13\20")
        buf.write("\3\20\3\20\7\20\u0269\n\20\f\20\16\20\u026c\13\20\3\20")
        buf.write("\3\20\7\20\u0270\n\20\f\20\16\20\u0273\13\20\3\20\3\20")
        buf.write("\7\20\u0277\n\20\f\20\16\20\u027a\13\20\3\20\3\20\3\21")
        buf.write("\7\21\u027f\n\21\f\21\16\21\u0282\13\21\3\21\3\21\7\21")
        buf.write("\u0286\n\21\f\21\16\21\u0289\13\21\3\21\3\21\7\21\u028d")
        buf.write("\n\21\f\21\16\21\u0290\13\21\3\21\3\21\7\21\u0294\n\21")
        buf.write("\f\21\16\21\u0297\13\21\3\21\3\21\3\22\3\22\5\22\u029d")
        buf.write("\n\22\3\23\7\23\u02a0\n\23\f\23\16\23\u02a3\13\23\3\23")
        buf.write("\3\23\7\23\u02a7\n\23\f\23\16\23\u02aa\13\23\3\23\3\23")
        buf.write("\7\23\u02ae\n\23\f\23\16\23\u02b1\13\23\3\23\3\23\7\23")
        buf.write("\u02b5\n\23\f\23\16\23\u02b8\13\23\3\23\3\23\6\23\u02bc")
        buf.write("\n\23\r\23\16\23\u02bd\3\23\3\23\7\23\u02c2\n\23\f\23")
        buf.write("\16\23\u02c5\13\23\3\23\3\23\7\23\u02c9\n\23\f\23\16\23")
        buf.write("\u02cc\13\23\3\23\3\23\7\23\u02d0\n\23\f\23\16\23\u02d3")
        buf.write("\13\23\3\23\3\23\7\23\u02d7\n\23\f\23\16\23\u02da\13\23")
        buf.write("\3\23\3\23\7\23\u02de\n\23\f\23\16\23\u02e1\13\23\7\23")
        buf.write("\u02e3\n\23\f\23\16\23\u02e6\13\23\3\24\7\24\u02e9\n\24")
        buf.write("\f\24\16\24\u02ec\13\24\3\24\3\24\6\24\u02f0\n\24\r\24")
        buf.write("\16\24\u02f1\3\24\3\24\7\24\u02f6\n\24\f\24\16\24\u02f9")
        buf.write("\13\24\3\24\3\24\7\24\u02fd\n\24\f\24\16\24\u0300\13\24")
        buf.write("\3\24\3\24\3\25\7\25\u0305\n\25\f\25\16\25\u0308\13\25")
        buf.write("\3\25\3\25\7\25\u030c\n\25\f\25\16\25\u030f\13\25\3\25")
        buf.write("\3\25\7\25\u0313\n\25\f\25\16\25\u0316\13\25\3\25\3\25")
        buf.write("\7\25\u031a\n\25\f\25\16\25\u031d\13\25\3\25\3\25\7\25")
        buf.write("\u0321\n\25\f\25\16\25\u0324\13\25\3\25\3\25\7\25\u0328")
        buf.write("\n\25\f\25\16\25\u032b\13\25\3\25\3\25\7\25\u032f\n\25")
        buf.write("\f\25\16\25\u0332\13\25\3\25\3\25\3\26\7\26\u0337\n\26")
        buf.write("\f\26\16\26\u033a\13\26\3\26\3\26\6\26\u033e\n\26\r\26")
        buf.write("\16\26\u033f\3\26\3\26\3\27\7\27\u0345\n\27\f\27\16\27")
        buf.write("\u0348\13\27\3\27\3\27\6\27\u034c\n\27\r\27\16\27\u034d")
        buf.write("\3\27\3\27\7\27\u0352\n\27\f\27\16\27\u0355\13\27\3\27")
        buf.write("\3\27\6\27\u0359\n\27\r\27\16\27\u035a\3\27\3\27\7\27")
        buf.write("\u035f\n\27\f\27\16\27\u0362\13\27\3\27\3\27\6\27\u0366")
        buf.write("\n\27\r\27\16\27\u0367\3\27\5\27\u036b\n\27\3\30\3\30")
        buf.write("\3\30\6\30\u0370\n\30\r\30\16\30\u0371\3\30\5\30\u0375")
        buf.write("\n\30\3\31\3\31\3\31\3\31\3\31\5\31\u037c\n\31\3\32\7")
        buf.write("\32\u037f\n\32\f\32\16\32\u0382\13\32\3\32\3\32\6\32\u0386")
        buf.write("\n\32\r\32\16\32\u0387\3\32\3\32\7\32\u038c\n\32\f\32")
        buf.write("\16\32\u038f\13\32\3\32\3\32\7\32\u0393\n\32\f\32\16\32")
        buf.write("\u0396\13\32\3\32\3\32\3\33\7\33\u039b\n\33\f\33\16\33")
        buf.write("\u039e\13\33\3\33\3\33\6\33\u03a2\n\33\r\33\16\33\u03a3")
        buf.write("\3\33\3\33\7\33\u03a8\n\33\f\33\16\33\u03ab\13\33\3\33")
        buf.write("\3\33\7\33\u03af\n\33\f\33\16\33\u03b2\13\33\3\33\3\33")
        buf.write("\7\33\u03b6\n\33\f\33\16\33\u03b9\13\33\3\33\3\33\7\33")
        buf.write("\u03bd\n\33\f\33\16\33\u03c0\13\33\3\33\3\33\3\34\7\34")
        buf.write("\u03c5\n\34\f\34\16\34\u03c8\13\34\3\34\3\34\6\34\u03cc")
        buf.write("\n\34\r\34\16\34\u03cd\3\34\3\34\7\34\u03d2\n\34\f\34")
        buf.write("\16\34\u03d5\13\34\3\34\3\34\7\34\u03d9\n\34\f\34\16\34")
        buf.write("\u03dc\13\34\3\34\3\34\3\35\7\35\u03e1\n\35\f\35\16\35")
        buf.write("\u03e4\13\35\3\35\3\35\6\35\u03e8\n\35\r\35\16\35\u03e9")
        buf.write("\3\35\3\35\7\35\u03ee\n\35\f\35\16\35\u03f1\13\35\3\35")
        buf.write("\3\35\7\35\u03f5\n\35\f\35\16\35\u03f8\13\35\3\35\3\35")
        buf.write("\7\35\u03fc\n\35\f\35\16\35\u03ff\13\35\3\35\3\35\7\35")
        buf.write("\u0403\n\35\f\35\16\35\u0406\13\35\3\35\3\35\3\36\7\36")
        buf.write("\u040b\n\36\f\36\16\36\u040e\13\36\3\36\3\36\6\36\u0412")
        buf.write("\n\36\r\36\16\36\u0413\3\36\3\36\7\36\u0418\n\36\f\36")
        buf.write("\16\36\u041b\13\36\3\36\3\36\7\36\u041f\n\36\f\36\16\36")
        buf.write("\u0422\13\36\3\36\3\36\7\36\u0426\n\36\f\36\16\36\u0429")
        buf.write("\13\36\3\36\3\36\7\36\u042d\n\36\f\36\16\36\u0430\13\36")
        buf.write("\3\36\3\36\3\37\7\37\u0435\n\37\f\37\16\37\u0438\13\37")
        buf.write("\3\37\3\37\6\37\u043c\n\37\r\37\16\37\u043d\3\37\3\37")
        buf.write("\7\37\u0442\n\37\f\37\16\37\u0445\13\37\3\37\3\37\7\37")
        buf.write("\u0449\n\37\f\37\16\37\u044c\13\37\3\37\3\37\3\37\7\37")
        buf.write("\u0451\n\37\f\37\16\37\u0454\13\37\3\37\3\37\6\37\u0458")
        buf.write("\n\37\r\37\16\37\u0459\3\37\3\37\7\37\u045e\n\37\f\37")
        buf.write("\16\37\u0461\13\37\3\37\3\37\7\37\u0465\n\37\f\37\16\37")
        buf.write("\u0468\13\37\3\37\3\37\5\37\u046c\n\37\3 \3 \3 \7 \u0471")
        buf.write("\n \f \16 \u0474\13 \3 \3 \7 \u0478\n \f \16 \u047b\13")
        buf.write(" \3 \3 \3 \3 \7 \u0481\n \f \16 \u0484\13 \3 \3 \3 \7")
        buf.write(" \u0489\n \f \16 \u048c\13 \3 \3 \3 \7 \u0491\n \f \16")
        buf.write(" \u0494\13 \3 \3 \5 \u0498\n \3 \3 \7 \u049c\n \f \16")
        buf.write(" \u049f\13 \3 \3 \7 \u04a3\n \f \16 \u04a6\13 \3 \3 \3")
        buf.write(" \7 \u04ab\n \f \16 \u04ae\13 \3 \3 \7 \u04b2\n \f \16")
        buf.write(" \u04b5\13 \3 \3 \3 \7 \u04ba\n \f \16 \u04bd\13 \3 \3")
        buf.write(" \7 \u04c1\n \f \16 \u04c4\13 \3 \3 \3 \7 \u04c9\n \f")
        buf.write(" \16 \u04cc\13 \3 \3 \7 \u04d0\n \f \16 \u04d3\13 \3 ")
        buf.write("\3 \3 \7 \u04d8\n \f \16 \u04db\13 \3 \3 \7 \u04df\n ")
        buf.write("\f \16 \u04e2\13 \3 \7 \u04e5\n \f \16 \u04e8\13 \3!\3")
        buf.write("!\3!\5!\u04ed\n!\3!\2\3>\"\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@\2\6\3\2\')\3\2")
        buf.write("+-\4\2**..\4\2\30\31/\62\2\u059a\2P\3\2\2\2\4\u0085\3")
        buf.write("\2\2\2\6\u0098\3\2\2\2\b\u009b\3\2\2\2\n\u00df\3\2\2\2")
        buf.write("\f\u0114\3\2\2\2\16\u012c\3\2\2\2\20\u0131\3\2\2\2\22")
        buf.write("\u015b\3\2\2\2\24\u0193\3\2\2\2\26\u01bc\3\2\2\2\30\u01e6")
        buf.write("\3\2\2\2\32\u0202\3\2\2\2\34\u022c\3\2\2\2\36\u0256\3")
        buf.write("\2\2\2 \u0280\3\2\2\2\"\u029c\3\2\2\2$\u02a1\3\2\2\2&")
        buf.write("\u02ea\3\2\2\2(\u0306\3\2\2\2*\u0338\3\2\2\2,\u036a\3")
        buf.write("\2\2\2.\u0374\3\2\2\2\60\u037b\3\2\2\2\62\u0380\3\2\2")
        buf.write("\2\64\u039c\3\2\2\2\66\u03c6\3\2\2\28\u03e2\3\2\2\2:\u040c")
        buf.write("\3\2\2\2<\u046b\3\2\2\2>\u0497\3\2\2\2@\u04ec\3\2\2\2")
        buf.write("BD\7\66\2\2CB\3\2\2\2DG\3\2\2\2EC\3\2\2\2EF\3\2\2\2FH")
        buf.write("\3\2\2\2GE\3\2\2\2HJ\5\4\3\2IK\7\3\2\2JI\3\2\2\2KL\3\2")
        buf.write("\2\2LJ\3\2\2\2LM\3\2\2\2MO\3\2\2\2NE\3\2\2\2OR\3\2\2\2")
        buf.write("PN\3\2\2\2PQ\3\2\2\2QV\3\2\2\2RP\3\2\2\2SU\7\66\2\2TS")
        buf.write("\3\2\2\2UX\3\2\2\2VT\3\2\2\2VW\3\2\2\2WY\3\2\2\2XV\3\2")
        buf.write("\2\2Y]\5\4\3\2Z\\\7\66\2\2[Z\3\2\2\2\\_\3\2\2\2][\3\2")
        buf.write("\2\2]^\3\2\2\2^n\3\2\2\2_]\3\2\2\2`b\7\3\2\2a`\3\2\2\2")
        buf.write("bc\3\2\2\2ca\3\2\2\2cd\3\2\2\2de\3\2\2\2ei\5\4\3\2fh\7")
        buf.write("\66\2\2gf\3\2\2\2hk\3\2\2\2ig\3\2\2\2ij\3\2\2\2jm\3\2")
        buf.write("\2\2ki\3\2\2\2la\3\2\2\2mp\3\2\2\2nl\3\2\2\2no\3\2\2\2")
        buf.write("oq\3\2\2\2pn\3\2\2\2qr\7\2\2\3r\3\3\2\2\2s\u0086\5(\25")
        buf.write("\2t\u0086\5\36\20\2u\u0086\5\16\b\2v\u0086\5&\24\2w\u0086")
        buf.write("\5*\26\2x\u0086\5\60\31\2y\u0086\5$\23\2z\u0086\5\b\5")
        buf.write("\2{\u0086\5\n\6\2|\u0086\5<\37\2}\u0086\5,\27\2~\u0086")
        buf.write("\5.\30\2\177\u0081\7\66\2\2\u0080\177\3\2\2\2\u0081\u0084")
        buf.write("\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2\u0083")
        buf.write("\u0086\3\2\2\2\u0084\u0082\3\2\2\2\u0085s\3\2\2\2\u0085")
        buf.write("t\3\2\2\2\u0085u\3\2\2\2\u0085v\3\2\2\2\u0085w\3\2\2\2")
        buf.write("\u0085x\3\2\2\2\u0085y\3\2\2\2\u0085z\3\2\2\2\u0085{\3")
        buf.write("\2\2\2\u0085|\3\2\2\2\u0085}\3\2\2\2\u0085~\3\2\2\2\u0085")
        buf.write("\u0082\3\2\2\2\u0086\5\3\2\2\2\u0087\u0089\7\66\2\2\u0088")
        buf.write("\u0087\3\2\2\2\u0089\u008c\3\2\2\2\u008a\u0088\3\2\2\2")
        buf.write("\u008a\u008b\3\2\2\2\u008b\u008d\3\2\2\2\u008c\u008a\3")
        buf.write("\2\2\2\u008d\u0091\5\4\3\2\u008e\u0090\7\66\2\2\u008f")
        buf.write("\u008e\3\2\2\2\u0090\u0093\3\2\2\2\u0091\u008f\3\2\2\2")
        buf.write("\u0091\u0092\3\2\2\2\u0092\u0094\3\2\2\2\u0093\u0091\3")
        buf.write("\2\2\2\u0094\u0095\7\3\2\2\u0095\u0097\3\2\2\2\u0096\u008a")
        buf.write("\3\2\2\2\u0097\u009a\3\2\2\2\u0098\u0096\3\2\2\2\u0098")
        buf.write("\u0099\3\2\2\2\u0099\7\3\2\2\2\u009a\u0098\3\2\2\2\u009b")
        buf.write("\u009d\7\4\2\2\u009c\u009e\7\66\2\2\u009d\u009c\3\2\2")
        buf.write("\2\u009e\u009f\3\2\2\2\u009f\u009d\3\2\2\2\u009f\u00a0")
        buf.write("\3\2\2\2\u00a0\u00a1\3\2\2\2\u00a1\u00a3\7B\2\2\u00a2")
        buf.write("\u00a4\7\66\2\2\u00a3\u00a2\3\2\2\2\u00a4\u00a5\3\2\2")
        buf.write("\2\u00a5\u00a3\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a7")
        buf.write("\3\2\2\2\u00a7\u00a9\7\5\2\2\u00a8\u00aa\7\66\2\2\u00a9")
        buf.write("\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00a9\3\2\2\2")
        buf.write("\u00ab\u00ac\3\2\2\2\u00ac\u00ad\3\2\2\2\u00ad\u00af\5")
        buf.write("> \2\u00ae\u00b0\7\66\2\2\u00af\u00ae\3\2\2\2\u00b0\u00b1")
        buf.write("\3\2\2\2\u00b1\u00af\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2")
        buf.write("\u00b3\3\2\2\2\u00b3\u00b5\7\6\2\2\u00b4\u00b6\7\66\2")
        buf.write("\2\u00b5\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b5")
        buf.write("\3\2\2\2\u00b7\u00b8\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9")
        buf.write("\u00bb\5> \2\u00ba\u00bc\7\66\2\2\u00bb\u00ba\3\2\2\2")
        buf.write("\u00bc\u00bd\3\2\2\2\u00bd\u00bb\3\2\2\2\u00bd\u00be\3")
        buf.write("\2\2\2\u00be\u00bf\3\2\2\2\u00bf\u00c1\7\7\2\2\u00c0\u00c2")
        buf.write("\7\66\2\2\u00c1\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3")
        buf.write("\u00c1\3\2\2\2\u00c3\u00c4\3\2\2\2\u00c4\u00c5\3\2\2\2")
        buf.write("\u00c5\u00c7\5> \2\u00c6\u00c8\7\66\2\2\u00c7\u00c6\3")
        buf.write("\2\2\2\u00c8\u00c9\3\2\2\2\u00c9\u00c7\3\2\2\2\u00c9\u00ca")
        buf.write("\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb\u00cf\7\b\2\2\u00cc")
        buf.write("\u00ce\7\66\2\2\u00cd\u00cc\3\2\2\2\u00ce\u00d1\3\2\2")
        buf.write("\2\u00cf\u00cd\3\2\2\2\u00cf\u00d0\3\2\2\2\u00d0\u00d2")
        buf.write("\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\u00d3\7\3\2\2\u00d3")
        buf.write("\u00d7\5\6\4\2\u00d4\u00d6\7\66\2\2\u00d5\u00d4\3\2\2")
        buf.write("\2\u00d6\u00d9\3\2\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d8")
        buf.write("\3\2\2\2\u00d8\u00da\3\2\2\2\u00d9\u00d7\3\2\2\2\u00da")
        buf.write("\u00db\7\t\2\2\u00db\t\3\2\2\2\u00dc\u00de\7\66\2\2\u00dd")
        buf.write("\u00dc\3\2\2\2\u00de\u00e1\3\2\2\2\u00df\u00dd\3\2\2\2")
        buf.write("\u00df\u00e0\3\2\2\2\u00e0\u00e2\3\2\2\2\u00e1\u00df\3")
        buf.write("\2\2\2\u00e2\u00e4\7\n\2\2\u00e3\u00e5\7\66\2\2\u00e4")
        buf.write("\u00e3\3\2\2\2\u00e5\u00e6\3\2\2\2\u00e6\u00e4\3\2\2\2")
        buf.write("\u00e6\u00e7\3\2\2\2\u00e7\u00e8\3\2\2\2\u00e8\u00f8\5")
        buf.write("\f\7\2\u00e9\u00eb\7\13\2\2\u00ea\u00ec\7\66\2\2\u00eb")
        buf.write("\u00ea\3\2\2\2\u00ec\u00ed\3\2\2\2\u00ed\u00eb\3\2\2\2")
        buf.write("\u00ed\u00ee\3\2\2\2\u00ee\u00ef\3\2\2\2\u00ef\u00f1\7")
        buf.write("\n\2\2\u00f0\u00f2\7\66\2\2\u00f1\u00f0\3\2\2\2\u00f2")
        buf.write("\u00f3\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f3\u00f4\3\2\2\2")
        buf.write("\u00f4\u00f5\3\2\2\2\u00f5\u00f7\5\f\7\2\u00f6\u00e9\3")
        buf.write("\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f8\u00f9")
        buf.write("\3\2\2\2\u00f9\u00fe\3\2\2\2\u00fa\u00f8\3\2\2\2\u00fb")
        buf.write("\u00fd\7\66\2\2\u00fc\u00fb\3\2\2\2\u00fd\u0100\3\2\2")
        buf.write("\2\u00fe\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u010a")
        buf.write("\3\2\2\2\u0100\u00fe\3\2\2\2\u0101\u0103\7\13\2\2\u0102")
        buf.write("\u0104\7\66\2\2\u0103\u0102\3\2\2\2\u0104\u0105\3\2\2")
        buf.write("\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u0107")
        buf.write("\3\2\2\2\u0107\u0108\7\b\2\2\u0108\u0109\7\3\2\2\u0109")
        buf.write("\u010b\5\6\4\2\u010a\u0101\3\2\2\2\u010a\u010b\3\2\2\2")
        buf.write("\u010b\u010f\3\2\2\2\u010c\u010e\7\66\2\2\u010d\u010c")
        buf.write("\3\2\2\2\u010e\u0111\3\2\2\2\u010f\u010d\3\2\2\2\u010f")
        buf.write("\u0110\3\2\2\2\u0110\u0112\3\2\2\2\u0111\u010f\3\2\2\2")
        buf.write("\u0112\u0113\7\t\2\2\u0113\13\3\2\2\2\u0114\u0116\5> ")
        buf.write("\2\u0115\u0117\7\66\2\2\u0116\u0115\3\2\2\2\u0117\u0118")
        buf.write("\3\2\2\2\u0118\u0116\3\2\2\2\u0118\u0119\3\2\2\2\u0119")
        buf.write("\u011a\3\2\2\2\u011a\u011b\7\b\2\2\u011b\u011f\7\3\2\2")
        buf.write("\u011c\u011e\7\66\2\2\u011d\u011c\3\2\2\2\u011e\u0121")
        buf.write("\3\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120")
        buf.write("\u0122\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123\5\6\4\2")
        buf.write("\u0123\r\3\2\2\2\u0124\u012d\5\20\t\2\u0125\u012d\5\22")
        buf.write("\n\2\u0126\u012d\5\24\13\2\u0127\u012d\5\26\f\2\u0128")
        buf.write("\u012d\5\30\r\2\u0129\u012d\5\32\16\2\u012a\u012d\5\34")
        buf.write("\17\2\u012b\u012d\5\36\20\2\u012c\u0124\3\2\2\2\u012c")
        buf.write("\u0125\3\2\2\2\u012c\u0126\3\2\2\2\u012c\u0127\3\2\2\2")
        buf.write("\u012c\u0128\3\2\2\2\u012c\u0129\3\2\2\2\u012c\u012a\3")
        buf.write("\2\2\2\u012c\u012b\3\2\2\2\u012d\17\3\2\2\2\u012e\u0130")
        buf.write("\7\66\2\2\u012f\u012e\3\2\2\2\u0130\u0133\3\2\2\2\u0131")
        buf.write("\u012f\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134\3\2\2\2")
        buf.write("\u0133\u0131\3\2\2\2\u0134\u0136\7\f\2\2\u0135\u0137\7")
        buf.write("\66\2\2\u0136\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138")
        buf.write("\u0136\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013a\3\2\2\2")
        buf.write("\u013a\u013e\7B\2\2\u013b\u013d\7\66\2\2\u013c\u013b\3")
        buf.write("\2\2\2\u013d\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f")
        buf.write("\3\2\2\2\u013f\u0141\3\2\2\2\u0140\u013e\3\2\2\2\u0141")
        buf.write("\u0145\7\r\2\2\u0142\u0144\7\66\2\2\u0143\u0142\3\2\2")
        buf.write("\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2\u0145\u0146")
        buf.write("\3\2\2\2\u0146\u0148\3\2\2\2\u0147\u0145\3\2\2\2\u0148")
        buf.write("\u014c\5> \2\u0149\u014b\7\66\2\2\u014a\u0149\3\2\2\2")
        buf.write("\u014b\u014e\3\2\2\2\u014c\u014a\3\2\2\2\u014c\u014d\3")
        buf.write("\2\2\2\u014d\u014f\3\2\2\2\u014e\u014c\3\2\2\2\u014f\u0153")
        buf.write("\7\16\2\2\u0150\u0152\7\66\2\2\u0151\u0150\3\2\2\2\u0152")
        buf.write("\u0155\3\2\2\2\u0153\u0151\3\2\2\2\u0153\u0154\3\2\2\2")
        buf.write("\u0154\u0156\3\2\2\2\u0155\u0153\3\2\2\2\u0156\u0157\5")
        buf.write("> \2\u0157\21\3\2\2\2\u0158\u015a\7\66\2\2\u0159\u0158")
        buf.write("\3\2\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015b")
        buf.write("\u015c\3\2\2\2\u015c\u015e\3\2\2\2\u015d\u015b\3\2\2\2")
        buf.write("\u015e\u0160\7\17\2\2\u015f\u0161\7\66\2\2\u0160\u015f")
        buf.write("\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0160\3\2\2\2\u0162")
        buf.write("\u0163\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u0168\7B\2\2")
        buf.write("\u0165\u0167\7\66\2\2\u0166\u0165\3\2\2\2\u0167\u016a")
        buf.write("\3\2\2\2\u0168\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169")
        buf.write("\u016b\3\2\2\2\u016a\u0168\3\2\2\2\u016b\u016f\7\r\2\2")
        buf.write("\u016c\u016e\7\66\2\2\u016d\u016c\3\2\2\2\u016e\u0171")
        buf.write("\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2\2\2\u0170")
        buf.write("\u0172\3\2\2\2\u0171\u016f\3\2\2\2\u0172\u0176\5> \2\u0173")
        buf.write("\u0175\7\66\2\2\u0174\u0173\3\2\2\2\u0175\u0178\3\2\2")
        buf.write("\2\u0176\u0174\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0179")
        buf.write("\3\2\2\2\u0178\u0176\3\2\2\2\u0179\u017d\7\16\2\2\u017a")
        buf.write("\u017c\7\66\2\2\u017b\u017a\3\2\2\2\u017c\u017f\3\2\2")
        buf.write("\2\u017d\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0180")
        buf.write("\3\2\2\2\u017f\u017d\3\2\2\2\u0180\u0184\5> \2\u0181\u0183")
        buf.write("\7\66\2\2\u0182\u0181\3\2\2\2\u0183\u0186\3\2\2\2\u0184")
        buf.write("\u0182\3\2\2\2\u0184\u0185\3\2\2\2\u0185\u0187\3\2\2\2")
        buf.write("\u0186\u0184\3\2\2\2\u0187\u018b\7\16\2\2\u0188\u018a")
        buf.write("\7\66\2\2\u0189\u0188\3\2\2\2\u018a\u018d\3\2\2\2\u018b")
        buf.write("\u0189\3\2\2\2\u018b\u018c\3\2\2\2\u018c\u018e\3\2\2\2")
        buf.write("\u018d\u018b\3\2\2\2\u018e\u018f\5> \2\u018f\23\3\2\2")
        buf.write("\2\u0190\u0192\7\66\2\2\u0191\u0190\3\2\2\2\u0192\u0195")
        buf.write("\3\2\2\2\u0193\u0191\3\2\2\2\u0193\u0194\3\2\2\2\u0194")
        buf.write("\u0196\3\2\2\2\u0195\u0193\3\2\2\2\u0196\u0198\7\20\2")
        buf.write("\2\u0197\u0199\7\66\2\2\u0198\u0197\3\2\2\2\u0199\u019a")
        buf.write("\3\2\2\2\u019a\u0198\3\2\2\2\u019a\u019b\3\2\2\2\u019b")
        buf.write("\u019c\3\2\2\2\u019c\u01a0\7B\2\2\u019d\u019f\7\66\2\2")
        buf.write("\u019e\u019d\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3\3\2\2\2\u01a2\u01a0")
        buf.write("\3\2\2\2\u01a3\u01a7\7\r\2\2\u01a4\u01a6\7\66\2\2\u01a5")
        buf.write("\u01a4\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2")
        buf.write("\u01a7\u01a8\3\2\2\2\u01a8\u01aa\3\2\2\2\u01a9\u01a7\3")
        buf.write("\2\2\2\u01aa\u01ae\7B\2\2\u01ab\u01ad\7\66\2\2\u01ac\u01ab")
        buf.write("\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac\3\2\2\2\u01ae")
        buf.write("\u01af\3\2\2\2\u01af\u01b1\3\2\2\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b1\u01b3\7\16\2\2\u01b2\u01b4\7\66\2\2\u01b3\u01b2")
        buf.write("\3\2\2\2\u01b4\u01b5\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5")
        buf.write("\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\u01b8\7B\2\2")
        buf.write("\u01b8\25\3\2\2\2\u01b9\u01bb\7\66\2\2\u01ba\u01b9\3\2")
        buf.write("\2\2\u01bb\u01be\3\2\2\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd")
        buf.write("\3\2\2\2\u01bd\u01bf\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf")
        buf.write("\u01c1\7\21\2\2\u01c0\u01c2\7\66\2\2\u01c1\u01c0\3\2\2")
        buf.write("\2\u01c2\u01c3\3\2\2\2\u01c3\u01c1\3\2\2\2\u01c3\u01c4")
        buf.write("\3\2\2\2\u01c4\u01c5\3\2\2\2\u01c5\u01c9\7B\2\2\u01c6")
        buf.write("\u01c8\7\66\2\2\u01c7\u01c6\3\2\2\2\u01c8\u01cb\3\2\2")
        buf.write("\2\u01c9\u01c7\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\u01cc")
        buf.write("\3\2\2\2\u01cb\u01c9\3\2\2\2\u01cc\u01d0\7\r\2\2\u01cd")
        buf.write("\u01cf\7\66\2\2\u01ce\u01cd\3\2\2\2\u01cf\u01d2\3\2\2")
        buf.write("\2\u01d0\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d3")
        buf.write("\3\2\2\2\u01d2\u01d0\3\2\2\2\u01d3\u01d7\7B\2\2\u01d4")
        buf.write("\u01d6\7\66\2\2\u01d5\u01d4\3\2\2\2\u01d6\u01d9\3\2\2")
        buf.write("\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01de\7\16\2\2\u01db")
        buf.write("\u01dd\7\66\2\2\u01dc\u01db\3\2\2\2\u01dd\u01e0\3\2\2")
        buf.write("\2\u01de\u01dc\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e1")
        buf.write("\3\2\2\2\u01e0\u01de\3\2\2\2\u01e1\u01e2\5> \2\u01e2\27")
        buf.write("\3\2\2\2\u01e3\u01e5\7\66\2\2\u01e4\u01e3\3\2\2\2\u01e5")
        buf.write("\u01e8\3\2\2\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u01e9\3\2\2\2\u01e8\u01e6\3\2\2\2\u01e9\u01eb\7")
        buf.write("\22\2\2\u01ea\u01ec\7\66\2\2\u01eb\u01ea\3\2\2\2\u01ec")
        buf.write("\u01ed\3\2\2\2\u01ed\u01eb\3\2\2\2\u01ed\u01ee\3\2\2\2")
        buf.write("\u01ee\u01ef\3\2\2\2\u01ef\u01f3\7B\2\2\u01f0\u01f2\7")
        buf.write("\66\2\2\u01f1\u01f0\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3")
        buf.write("\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4\u01f6\3\2\2\2")
        buf.write("\u01f5\u01f3\3\2\2\2\u01f6\u01fa\7\r\2\2\u01f7\u01f9\7")
        buf.write("\66\2\2\u01f8\u01f7\3\2\2\2\u01f9\u01fc\3\2\2\2\u01fa")
        buf.write("\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2\u01fb\u01fd\3\2\2\2")
        buf.write("\u01fc\u01fa\3\2\2\2\u01fd\u01fe\7B\2\2\u01fe\31\3\2\2")
        buf.write("\2\u01ff\u0201\7\66\2\2\u0200\u01ff\3\2\2\2\u0201\u0204")
        buf.write("\3\2\2\2\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0205\3\2\2\2\u0204\u0202\3\2\2\2\u0205\u0207\7\23\2")
        buf.write("\2\u0206\u0208\7\66\2\2\u0207\u0206\3\2\2\2\u0208\u0209")
        buf.write("\3\2\2\2\u0209\u0207\3\2\2\2\u0209\u020a\3\2\2\2\u020a")
        buf.write("\u020b\3\2\2\2\u020b\u020f\7B\2\2\u020c\u020e\7\66\2\2")
        buf.write("\u020d\u020c\3\2\2\2\u020e\u0211\3\2\2\2\u020f\u020d\3")
        buf.write("\2\2\2\u020f\u0210\3\2\2\2\u0210\u0212\3\2\2\2\u0211\u020f")
        buf.write("\3\2\2\2\u0212\u0216\7\r\2\2\u0213\u0215\7\66\2\2\u0214")
        buf.write("\u0213\3\2\2\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2")
        buf.write("\u0216\u0217\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0216\3")
        buf.write("\2\2\2\u0219\u021d\7B\2\2\u021a\u021c\7\66\2\2\u021b\u021a")
        buf.write("\3\2\2\2\u021c\u021f\3\2\2\2\u021d\u021b\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u021d\3\2\2\2")
        buf.write("\u0220\u0224\7\16\2\2\u0221\u0223\7\66\2\2\u0222\u0221")
        buf.write("\3\2\2\2\u0223\u0226\3\2\2\2\u0224\u0222\3\2\2\2\u0224")
        buf.write("\u0225\3\2\2\2\u0225\u0227\3\2\2\2\u0226\u0224\3\2\2\2")
        buf.write("\u0227\u0228\5> \2\u0228\33\3\2\2\2\u0229\u022b\7\66\2")
        buf.write("\2\u022a\u0229\3\2\2\2\u022b\u022e\3\2\2\2\u022c\u022a")
        buf.write("\3\2\2\2\u022c\u022d\3\2\2\2\u022d\u022f\3\2\2\2\u022e")
        buf.write("\u022c\3\2\2\2\u022f\u0231\7\23\2\2\u0230\u0232\7\66\2")
        buf.write("\2\u0231\u0230\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0231")
        buf.write("\3\2\2\2\u0233\u0234\3\2\2\2\u0234\u0235\3\2\2\2\u0235")
        buf.write("\u0239\7B\2\2\u0236\u0238\7\66\2\2\u0237\u0236\3\2\2\2")
        buf.write("\u0238\u023b\3\2\2\2\u0239\u0237\3\2\2\2\u0239\u023a\3")
        buf.write("\2\2\2\u023a\u023c\3\2\2\2\u023b\u0239\3\2\2\2\u023c\u0240")
        buf.write("\7\r\2\2\u023d\u023f\7\66\2\2\u023e\u023d\3\2\2\2\u023f")
        buf.write("\u0242\3\2\2\2\u0240\u023e\3\2\2\2\u0240\u0241\3\2\2\2")
        buf.write("\u0241\u0243\3\2\2\2\u0242\u0240\3\2\2\2\u0243\u0247\7")
        buf.write("B\2\2\u0244\u0246\7\66\2\2\u0245\u0244\3\2\2\2\u0246\u0249")
        buf.write("\3\2\2\2\u0247\u0245\3\2\2\2\u0247\u0248\3\2\2\2\u0248")
        buf.write("\u024a\3\2\2\2\u0249\u0247\3\2\2\2\u024a\u024e\7\16\2")
        buf.write("\2\u024b\u024d\7\66\2\2\u024c\u024b\3\2\2\2\u024d\u0250")
        buf.write("\3\2\2\2\u024e\u024c\3\2\2\2\u024e\u024f\3\2\2\2\u024f")
        buf.write("\u0251\3\2\2\2\u0250\u024e\3\2\2\2\u0251\u0252\7B\2\2")
        buf.write("\u0252\35\3\2\2\2\u0253\u0255\7\66\2\2\u0254\u0253\3\2")
        buf.write("\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3\2\2\2\u0256\u0257")
        buf.write("\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u0256\3\2\2\2\u0259")
        buf.write("\u025b\7\24\2\2\u025a\u025c\7\66\2\2\u025b\u025a\3\2\2")
        buf.write("\2\u025c\u025d\3\2\2\2\u025d\u025b\3\2\2\2\u025d\u025e")
        buf.write("\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0263\7B\2\2\u0260")
        buf.write("\u0262\7\66\2\2\u0261\u0260\3\2\2\2\u0262\u0265\3\2\2")
        buf.write("\2\u0263\u0261\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0266")
        buf.write("\3\2\2\2\u0265\u0263\3\2\2\2\u0266\u026a\7\r\2\2\u0267")
        buf.write("\u0269\7\66\2\2\u0268\u0267\3\2\2\2\u0269\u026c\3\2\2")
        buf.write("\2\u026a\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026d")
        buf.write("\3\2\2\2\u026c\u026a\3\2\2\2\u026d\u0271\7B\2\2\u026e")
        buf.write("\u0270\7\66\2\2\u026f\u026e\3\2\2\2\u0270\u0273\3\2\2")
        buf.write("\2\u0271\u026f\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0274")
        buf.write("\3\2\2\2\u0273\u0271\3\2\2\2\u0274\u0278\7\16\2\2\u0275")
        buf.write("\u0277\7\66\2\2\u0276\u0275\3\2\2\2\u0277\u027a\3\2\2")
        buf.write("\2\u0278\u0276\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b")
        buf.write("\3\2\2\2\u027a\u0278\3\2\2\2\u027b\u027c\7B\2\2\u027c")
        buf.write("\37\3\2\2\2\u027d\u027f\7\66\2\2\u027e\u027d\3\2\2\2\u027f")
        buf.write("\u0282\3\2\2\2\u0280\u027e\3\2\2\2\u0280\u0281\3\2\2\2")
        buf.write("\u0281\u0283\3\2\2\2\u0282\u0280\3\2\2\2\u0283\u0287\7")
        buf.write("B\2\2\u0284\u0286\7\66\2\2\u0285\u0284\3\2\2\2\u0286\u0289")
        buf.write("\3\2\2\2\u0287\u0285\3\2\2\2\u0287\u0288\3\2\2\2\u0288")
        buf.write("\u028a\3\2\2\2\u0289\u0287\3\2\2\2\u028a\u028e\7\25\2")
        buf.write("\2\u028b\u028d\7\66\2\2\u028c\u028b\3\2\2\2\u028d\u0290")
        buf.write("\3\2\2\2\u028e\u028c\3\2\2\2\u028e\u028f\3\2\2\2\u028f")
        buf.write("\u0291\3\2\2\2\u0290\u028e\3\2\2\2\u0291\u0295\5> \2\u0292")
        buf.write("\u0294\7\66\2\2\u0293\u0292\3\2\2\2\u0294\u0297\3\2\2")
        buf.write("\2\u0295\u0293\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0298")
        buf.write("\3\2\2\2\u0297\u0295\3\2\2\2\u0298\u0299\7\26\2\2\u0299")
        buf.write("!\3\2\2\2\u029a\u029d\7B\2\2\u029b\u029d\5 \21\2\u029c")
        buf.write("\u029a\3\2\2\2\u029c\u029b\3\2\2\2\u029d#\3\2\2\2\u029e")
        buf.write("\u02a0\7\66\2\2\u029f\u029e\3\2\2\2\u02a0\u02a3\3\2\2")
        buf.write("\2\u02a1\u029f\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a4")
        buf.write("\3\2\2\2\u02a3\u02a1\3\2\2\2\u02a4\u02a8\7\27\2\2\u02a5")
        buf.write("\u02a7\7\66\2\2\u02a6\u02a5\3\2\2\2\u02a7\u02aa\3\2\2")
        buf.write("\2\u02a8\u02a6\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02ab")
        buf.write("\3\2\2\2\u02aa\u02a8\3\2\2\2\u02ab\u02af\7\30\2\2\u02ac")
        buf.write("\u02ae\7\66\2\2\u02ad\u02ac\3\2\2\2\u02ae\u02b1\3\2\2")
        buf.write("\2\u02af\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2")
        buf.write("\3\2\2\2\u02b1\u02af\3\2\2\2\u02b2\u02b6\7=\2\2\u02b3")
        buf.write("\u02b5\7\66\2\2\u02b4\u02b3\3\2\2\2\u02b5\u02b8\3\2\2")
        buf.write("\2\u02b6\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b9")
        buf.write("\3\2\2\2\u02b8\u02b6\3\2\2\2\u02b9\u02bb\7\31\2\2\u02ba")
        buf.write("\u02bc\7\66\2\2\u02bb\u02ba\3\2\2\2\u02bc\u02bd\3\2\2")
        buf.write("\2\u02bd\u02bb\3\2\2\2\u02bd\u02be\3\2\2\2\u02be\u02bf")
        buf.write("\3\2\2\2\u02bf\u02c3\7B\2\2\u02c0\u02c2\7\66\2\2\u02c1")
        buf.write("\u02c0\3\2\2\2\u02c2\u02c5\3\2\2\2\u02c3\u02c1\3\2\2\2")
        buf.write("\u02c3\u02c4\3\2\2\2\u02c4\u02c6\3\2\2\2\u02c5\u02c3\3")
        buf.write("\2\2\2\u02c6\u02ca\7\r\2\2\u02c7\u02c9\7\66\2\2\u02c8")
        buf.write("\u02c7\3\2\2\2\u02c9\u02cc\3\2\2\2\u02ca\u02c8\3\2\2\2")
        buf.write("\u02ca\u02cb\3\2\2\2\u02cb\u02cd\3\2\2\2\u02cc\u02ca\3")
        buf.write("\2\2\2\u02cd\u02d1\7B\2\2\u02ce\u02d0\7\66\2\2\u02cf\u02ce")
        buf.write("\3\2\2\2\u02d0\u02d3\3\2\2\2\u02d1\u02cf\3\2\2\2\u02d1")
        buf.write("\u02d2\3\2\2\2\u02d2\u02e4\3\2\2\2\u02d3\u02d1\3\2\2\2")
        buf.write("\u02d4\u02d8\7\16\2\2\u02d5\u02d7\7\66\2\2\u02d6\u02d5")
        buf.write("\3\2\2\2\u02d7\u02da\3\2\2\2\u02d8\u02d6\3\2\2\2\u02d8")
        buf.write("\u02d9\3\2\2\2\u02d9\u02db\3\2\2\2\u02da\u02d8\3\2\2\2")
        buf.write("\u02db\u02df\7B\2\2\u02dc\u02de\7\66\2\2\u02dd\u02dc\3")
        buf.write("\2\2\2\u02de\u02e1\3\2\2\2\u02df\u02dd\3\2\2\2\u02df\u02e0")
        buf.write("\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e2")
        buf.write("\u02d4\3\2\2\2\u02e3\u02e6\3\2\2\2\u02e4\u02e2\3\2\2\2")
        buf.write("\u02e4\u02e5\3\2\2\2\u02e5%\3\2\2\2\u02e6\u02e4\3\2\2")
        buf.write("\2\u02e7\u02e9\7\66\2\2\u02e8\u02e7\3\2\2\2\u02e9\u02ec")
        buf.write("\3\2\2\2\u02ea\u02e8\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb")
        buf.write("\u02ed\3\2\2\2\u02ec\u02ea\3\2\2\2\u02ed\u02ef\7\32\2")
        buf.write("\2\u02ee\u02f0\7\66\2\2\u02ef\u02ee\3\2\2\2\u02f0\u02f1")
        buf.write("\3\2\2\2\u02f1\u02ef\3\2\2\2\u02f1\u02f2\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02f7\7B\2\2\u02f4\u02f6\7\66\2\2")
        buf.write("\u02f5\u02f4\3\2\2\2\u02f6\u02f9\3\2\2\2\u02f7\u02f5\3")
        buf.write("\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02fa\3\2\2\2\u02f9\u02f7")
        buf.write("\3\2\2\2\u02fa\u02fe\7\r\2\2\u02fb\u02fd\7\66\2\2\u02fc")
        buf.write("\u02fb\3\2\2\2\u02fd\u0300\3\2\2\2\u02fe\u02fc\3\2\2\2")
        buf.write("\u02fe\u02ff\3\2\2\2\u02ff\u0301\3\2\2\2\u0300\u02fe\3")
        buf.write("\2\2\2\u0301\u0302\5> \2\u0302\'\3\2\2\2\u0303\u0305\7")
        buf.write("\66\2\2\u0304\u0303\3\2\2\2\u0305\u0308\3\2\2\2\u0306")
        buf.write("\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307\u0309\3\2\2\2")
        buf.write("\u0308\u0306\3\2\2\2\u0309\u030d\7\33\2\2\u030a\u030c")
        buf.write("\7\66\2\2\u030b\u030a\3\2\2\2\u030c\u030f\3\2\2\2\u030d")
        buf.write("\u030b\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u0310\3\2\2\2")
        buf.write("\u030f\u030d\3\2\2\2\u0310\u0314\7\r\2\2\u0311\u0313\7")
        buf.write("\66\2\2\u0312\u0311\3\2\2\2\u0313\u0316\3\2\2\2\u0314")
        buf.write("\u0312\3\2\2\2\u0314\u0315\3\2\2\2\u0315\u0317\3\2\2\2")
        buf.write("\u0316\u0314\3\2\2\2\u0317\u031b\5> \2\u0318\u031a\7\66")
        buf.write("\2\2\u0319\u0318\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031e\3\2\2\2\u031d")
        buf.write("\u031b\3\2\2\2\u031e\u0322\7\16\2\2\u031f\u0321\7\66\2")
        buf.write("\2\u0320\u031f\3\2\2\2\u0321\u0324\3\2\2\2\u0322\u0320")
        buf.write("\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0325\3\2\2\2\u0324")
        buf.write("\u0322\3\2\2\2\u0325\u0329\5> \2\u0326\u0328\7\66\2\2")
        buf.write("\u0327\u0326\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327\3")
        buf.write("\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\3\2\2\2\u032b\u0329")
        buf.write("\3\2\2\2\u032c\u0330\7\16\2\2\u032d\u032f\7\66\2\2\u032e")
        buf.write("\u032d\3\2\2\2\u032f\u0332\3\2\2\2\u0330\u032e\3\2\2\2")
        buf.write("\u0330\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u0330\3")
        buf.write("\2\2\2\u0333\u0334\7>\2\2\u0334)\3\2\2\2\u0335\u0337\7")
        buf.write("\66\2\2\u0336\u0335\3\2\2\2\u0337\u033a\3\2\2\2\u0338")
        buf.write("\u0336\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033b\3\2\2\2")
        buf.write("\u033a\u0338\3\2\2\2\u033b\u033d\7\34\2\2\u033c\u033e")
        buf.write("\7\66\2\2\u033d\u033c\3\2\2\2\u033e\u033f\3\2\2\2\u033f")
        buf.write("\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0341\3\2\2\2")
        buf.write("\u0341\u0342\5\"\22\2\u0342+\3\2\2\2\u0343\u0345\7\66")
        buf.write("\2\2\u0344\u0343\3\2\2\2\u0345\u0348\3\2\2\2\u0346\u0344")
        buf.write("\3\2\2\2\u0346\u0347\3\2\2\2\u0347\u0349\3\2\2\2\u0348")
        buf.write("\u0346\3\2\2\2\u0349\u034b\7\35\2\2\u034a\u034c\7\66\2")
        buf.write("\2\u034b\u034a\3\2\2\2\u034c\u034d\3\2\2\2\u034d\u034b")
        buf.write("\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u036b\5\"\22\2\u0350\u0352\7\66\2\2\u0351\u0350\3\2\2")
        buf.write("\2\u0352\u0355\3\2\2\2\u0353\u0351\3\2\2\2\u0353\u0354")
        buf.write("\3\2\2\2\u0354\u0356\3\2\2\2\u0355\u0353\3\2\2\2\u0356")
        buf.write("\u0358\7\35\2\2\u0357\u0359\7\66\2\2\u0358\u0357\3\2\2")
        buf.write("\2\u0359\u035a\3\2\2\2\u035a\u0358\3\2\2\2\u035a\u035b")
        buf.write("\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u036b\5> \2\u035d\u035f")
        buf.write("\7\66\2\2\u035e\u035d\3\2\2\2\u035f\u0362\3\2\2\2\u0360")
        buf.write("\u035e\3\2\2\2\u0360\u0361\3\2\2\2\u0361\u0363\3\2\2\2")
        buf.write("\u0362\u0360\3\2\2\2\u0363\u0365\7\35\2\2\u0364\u0366")
        buf.write("\7\66\2\2\u0365\u0364\3\2\2\2\u0366\u0367\3\2\2\2\u0367")
        buf.write("\u0365\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u0369\3\2\2\2")
        buf.write("\u0369\u036b\7<\2\2\u036a\u0346\3\2\2\2\u036a\u0353\3")
        buf.write("\2\2\2\u036a\u0360\3\2\2\2\u036b-\3\2\2\2\u036c\u0375")
        buf.write("\7\36\2\2\u036d\u036f\7\36\2\2\u036e\u0370\7\66\2\2\u036f")
        buf.write("\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u036f\3\2\2\2")
        buf.write("\u0371\u0372\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0375\7")
        buf.write("<\2\2\u0374\u036c\3\2\2\2\u0374\u036d\3\2\2\2\u0375/\3")
        buf.write("\2\2\2\u0376\u037c\5\62\32\2\u0377\u037c\5\64\33\2\u0378")
        buf.write("\u037c\5\66\34\2\u0379\u037c\58\35\2\u037a\u037c\5:\36")
        buf.write("\2\u037b\u0376\3\2\2\2\u037b\u0377\3\2\2\2\u037b\u0378")
        buf.write("\3\2\2\2\u037b\u0379\3\2\2\2\u037b\u037a\3\2\2\2\u037c")
        buf.write("\61\3\2\2\2\u037d\u037f\7\66\2\2\u037e\u037d\3\2\2\2\u037f")
        buf.write("\u0382\3\2\2\2\u0380\u037e\3\2\2\2\u0380\u0381\3\2\2\2")
        buf.write("\u0381\u0383\3\2\2\2\u0382\u0380\3\2\2\2\u0383\u0385\7")
        buf.write("\37\2\2\u0384\u0386\7\66\2\2\u0385\u0384\3\2\2\2\u0386")
        buf.write("\u0387\3\2\2\2\u0387\u0385\3\2\2\2\u0387\u0388\3\2\2\2")
        buf.write("\u0388\u0389\3\2\2\2\u0389\u038d\5\"\22\2\u038a\u038c")
        buf.write("\7\66\2\2\u038b\u038a\3\2\2\2\u038c\u038f\3\2\2\2\u038d")
        buf.write("\u038b\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2")
        buf.write("\u038f\u038d\3\2\2\2\u0390\u0394\7\r\2\2\u0391\u0393\7")
        buf.write("\66\2\2\u0392\u0391\3\2\2\2\u0393\u0396\3\2\2\2\u0394")
        buf.write("\u0392\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0397\3\2\2\2")
        buf.write("\u0396\u0394\3\2\2\2\u0397\u0398\7>\2\2\u0398\63\3\2\2")
        buf.write("\2\u0399\u039b\7\66\2\2\u039a\u0399\3\2\2\2\u039b\u039e")
        buf.write("\3\2\2\2\u039c\u039a\3\2\2\2\u039c\u039d\3\2\2\2\u039d")
        buf.write("\u039f\3\2\2\2\u039e\u039c\3\2\2\2\u039f\u03a1\7 \2\2")
        buf.write("\u03a0\u03a2\7\66\2\2\u03a1\u03a0\3\2\2\2\u03a2\u03a3")
        buf.write("\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4")
        buf.write("\u03a5\3\2\2\2\u03a5\u03a9\5\"\22\2\u03a6\u03a8\7\66\2")
        buf.write("\2\u03a7\u03a6\3\2\2\2\u03a8\u03ab\3\2\2\2\u03a9\u03a7")
        buf.write("\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ac\3\2\2\2\u03ab")
        buf.write("\u03a9\3\2\2\2\u03ac\u03b0\7\r\2\2\u03ad\u03af\7\66\2")
        buf.write("\2\u03ae\u03ad\3\2\2\2\u03af\u03b2\3\2\2\2\u03b0\u03ae")
        buf.write("\3\2\2\2\u03b0\u03b1\3\2\2\2\u03b1\u03b3\3\2\2\2\u03b2")
        buf.write("\u03b0\3\2\2\2\u03b3\u03b7\5> \2\u03b4\u03b6\7\66\2\2")
        buf.write("\u03b5\u03b4\3\2\2\2\u03b6\u03b9\3\2\2\2\u03b7\u03b5\3")
        buf.write("\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03ba\3\2\2\2\u03b9\u03b7")
        buf.write("\3\2\2\2\u03ba\u03be\7\16\2\2\u03bb\u03bd\7\66\2\2\u03bc")
        buf.write("\u03bb\3\2\2\2\u03bd\u03c0\3\2\2\2\u03be\u03bc\3\2\2\2")
        buf.write("\u03be\u03bf\3\2\2\2\u03bf\u03c1\3\2\2\2\u03c0\u03be\3")
        buf.write("\2\2\2\u03c1\u03c2\5> \2\u03c2\65\3\2\2\2\u03c3\u03c5")
        buf.write("\7\66\2\2\u03c4\u03c3\3\2\2\2\u03c5\u03c8\3\2\2\2\u03c6")
        buf.write("\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c9\3\2\2\2")
        buf.write("\u03c8\u03c6\3\2\2\2\u03c9\u03cb\7!\2\2\u03ca\u03cc\7")
        buf.write("\66\2\2\u03cb\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2\u03cd")
        buf.write("\u03cb\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2")
        buf.write("\u03cf\u03d3\5\"\22\2\u03d0\u03d2\7\66\2\2\u03d1\u03d0")
        buf.write("\3\2\2\2\u03d2\u03d5\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3")
        buf.write("\u03d4\3\2\2\2\u03d4\u03d6\3\2\2\2\u03d5\u03d3\3\2\2\2")
        buf.write("\u03d6\u03da\7\r\2\2\u03d7\u03d9\7\66\2\2\u03d8\u03d7")
        buf.write("\3\2\2\2\u03d9\u03dc\3\2\2\2\u03da\u03d8\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03dd\3\2\2\2\u03dc\u03da\3\2\2\2")
        buf.write("\u03dd\u03de\5\"\22\2\u03de\67\3\2\2\2\u03df\u03e1\7\66")
        buf.write("\2\2\u03e0\u03df\3\2\2\2\u03e1\u03e4\3\2\2\2\u03e2\u03e0")
        buf.write("\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e5\3\2\2\2\u03e4")
        buf.write("\u03e2\3\2\2\2\u03e5\u03e7\7\"\2\2\u03e6\u03e8\7\66\2")
        buf.write("\2\u03e7\u03e6\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03e7")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb")
        buf.write("\u03ef\5\"\22\2\u03ec\u03ee\7\66\2\2\u03ed\u03ec\3\2\2")
        buf.write("\2\u03ee\u03f1\3\2\2\2\u03ef\u03ed\3\2\2\2\u03ef\u03f0")
        buf.write("\3\2\2\2\u03f0\u03f2\3\2\2\2\u03f1\u03ef\3\2\2\2\u03f2")
        buf.write("\u03f6\7\r\2\2\u03f3\u03f5\7\66\2\2\u03f4\u03f3\3\2\2")
        buf.write("\2\u03f5\u03f8\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f7")
        buf.write("\3\2\2\2\u03f7\u03f9\3\2\2\2\u03f8\u03f6\3\2\2\2\u03f9")
        buf.write("\u03fd\5> \2\u03fa\u03fc\7\66\2\2\u03fb\u03fa\3\2\2\2")
        buf.write("\u03fc\u03ff\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fe\3")
        buf.write("\2\2\2\u03fe\u0400\3\2\2\2\u03ff\u03fd\3\2\2\2\u0400\u0404")
        buf.write("\7\16\2\2\u0401\u0403\7\66\2\2\u0402\u0401\3\2\2\2\u0403")
        buf.write("\u0406\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2")
        buf.write("\u0405\u0407\3\2\2\2\u0406\u0404\3\2\2\2\u0407\u0408\5")
        buf.write("\"\22\2\u04089\3\2\2\2\u0409\u040b\7\66\2\2\u040a\u0409")
        buf.write("\3\2\2\2\u040b\u040e\3\2\2\2\u040c\u040a\3\2\2\2\u040c")
        buf.write("\u040d\3\2\2\2\u040d\u040f\3\2\2\2\u040e\u040c\3\2\2\2")
        buf.write("\u040f\u0411\7#\2\2\u0410\u0412\7\66\2\2\u0411\u0410\3")
        buf.write("\2\2\2\u0412\u0413\3\2\2\2\u0413\u0411\3\2\2\2\u0413\u0414")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u0419\5\"\22\2\u0416")
        buf.write("\u0418\7\66\2\2\u0417\u0416\3\2\2\2\u0418\u041b\3\2\2")
        buf.write("\2\u0419\u0417\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041c")
        buf.write("\3\2\2\2\u041b\u0419\3\2\2\2\u041c\u0420\7\r\2\2\u041d")
        buf.write("\u041f\7\66\2\2\u041e\u041d\3\2\2\2\u041f\u0422\3\2\2")
        buf.write("\2\u0420\u041e\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0423")
        buf.write("\3\2\2\2\u0422\u0420\3\2\2\2\u0423\u0427\5> \2\u0424\u0426")
        buf.write("\7\66\2\2\u0425\u0424\3\2\2\2\u0426\u0429\3\2\2\2\u0427")
        buf.write("\u0425\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u042a\3\2\2\2")
        buf.write("\u0429\u0427\3\2\2\2\u042a\u042e\7\16\2\2\u042b\u042d")
        buf.write("\7\66\2\2\u042c\u042b\3\2\2\2\u042d\u0430\3\2\2\2\u042e")
        buf.write("\u042c\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0431\3\2\2\2")
        buf.write("\u0430\u042e\3\2\2\2\u0431\u0432\5\"\22\2\u0432;\3\2\2")
        buf.write("\2\u0433\u0435\7\66\2\2\u0434\u0433\3\2\2\2\u0435\u0438")
        buf.write("\3\2\2\2\u0436\u0434\3\2\2\2\u0436\u0437\3\2\2\2\u0437")
        buf.write("\u0439\3\2\2\2\u0438\u0436\3\2\2\2\u0439\u043b\7$\2\2")
        buf.write("\u043a\u043c\7\66\2\2\u043b\u043a\3\2\2\2\u043c\u043d")
        buf.write("\3\2\2\2\u043d\u043b\3\2\2\2\u043d\u043e\3\2\2\2\u043e")
        buf.write("\u043f\3\2\2\2\u043f\u0443\5\"\22\2\u0440\u0442\7\66\2")
        buf.write("\2\u0441\u0440\3\2\2\2\u0442\u0445\3\2\2\2\u0443\u0441")
        buf.write("\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0446\3\2\2\2\u0445")
        buf.write("\u0443\3\2\2\2\u0446\u044a\7\r\2\2\u0447\u0449\7\66\2")
        buf.write("\2\u0448\u0447\3\2\2\2\u0449\u044c\3\2\2\2\u044a\u0448")
        buf.write("\3\2\2\2\u044a\u044b\3\2\2\2\u044b\u044d\3\2\2\2\u044c")
        buf.write("\u044a\3\2\2\2\u044d\u044e\5\"\22\2\u044e\u046c\3\2\2")
        buf.write("\2\u044f\u0451\7\66\2\2\u0450\u044f\3\2\2\2\u0451\u0454")
        buf.write("\3\2\2\2\u0452\u0450\3\2\2\2\u0452\u0453\3\2\2\2\u0453")
        buf.write("\u0455\3\2\2\2\u0454\u0452\3\2\2\2\u0455\u0457\7$\2\2")
        buf.write("\u0456\u0458\7\66\2\2\u0457\u0456\3\2\2\2\u0458\u0459")
        buf.write("\3\2\2\2\u0459\u0457\3\2\2\2\u0459\u045a\3\2\2\2\u045a")
        buf.write("\u045b\3\2\2\2\u045b\u045f\5\"\22\2\u045c\u045e\7\66\2")
        buf.write("\2\u045d\u045c\3\2\2\2\u045e\u0461\3\2\2\2\u045f\u045d")
        buf.write("\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2\2\u0461")
        buf.write("\u045f\3\2\2\2\u0462\u0466\7\r\2\2\u0463\u0465\7\66\2")
        buf.write("\2\u0464\u0463\3\2\2\2\u0465\u0468\3\2\2\2\u0466\u0464")
        buf.write("\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0469\3\2\2\2\u0468")
        buf.write("\u0466\3\2\2\2\u0469\u046a\5> \2\u046a\u046c\3\2\2\2\u046b")
        buf.write("\u0436\3\2\2\2\u046b\u0452\3\2\2\2\u046c=\3\2\2\2\u046d")
        buf.write("\u046e\b \1\2\u046e\u0472\7%\2\2\u046f\u0471\7\66\2\2")
        buf.write("\u0470\u046f\3\2\2\2\u0471\u0474\3\2\2\2\u0472\u0470\3")
        buf.write("\2\2\2\u0472\u0473\3\2\2\2\u0473\u0475\3\2\2\2\u0474\u0472")
        buf.write("\3\2\2\2\u0475\u0479\5> \2\u0476\u0478\7\66\2\2\u0477")
        buf.write("\u0476\3\2\2\2\u0478\u047b\3\2\2\2\u0479\u0477\3\2\2\2")
        buf.write("\u0479\u047a\3\2\2\2\u047a\u047c\3\2\2\2\u047b\u0479\3")
        buf.write("\2\2\2\u047c\u047d\7&\2\2\u047d\u0498\3\2\2\2\u047e\u0482")
        buf.write("\t\2\2\2\u047f\u0481\7\66\2\2\u0480\u047f\3\2\2\2\u0481")
        buf.write("\u0484\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483\3\2\2\2")
        buf.write("\u0483\u0485\3\2\2\2\u0484\u0482\3\2\2\2\u0485\u0498\5")
        buf.write("> \13\u0486\u048a\7*\2\2\u0487\u0489\7\66\2\2\u0488\u0487")
        buf.write("\3\2\2\2\u0489\u048c\3\2\2\2\u048a\u0488\3\2\2\2\u048a")
        buf.write("\u048b\3\2\2\2\u048b\u048d\3\2\2\2\u048c\u048a\3\2\2\2")
        buf.write("\u048d\u0498\5> \n\u048e\u0492\7\63\2\2\u048f\u0491\7")
        buf.write("\66\2\2\u0490\u048f\3\2\2\2\u0491\u0494\3\2\2\2\u0492")
        buf.write("\u0490\3\2\2\2\u0492\u0493\3\2\2\2\u0493\u0495\3\2\2\2")
        buf.write("\u0494\u0492\3\2\2\2\u0495\u0498\5> \6\u0496\u0498\5@")
        buf.write("!\2\u0497\u046d\3\2\2\2\u0497\u047e\3\2\2\2\u0497\u0486")
        buf.write("\3\2\2\2\u0497\u048e\3\2\2\2\u0497\u0496\3\2\2\2\u0498")
        buf.write("\u04e6\3\2\2\2\u0499\u049d\f\t\2\2\u049a\u049c\7\66\2")
        buf.write("\2\u049b\u049a\3\2\2\2\u049c\u049f\3\2\2\2\u049d\u049b")
        buf.write("\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0\3\2\2\2\u049f")
        buf.write("\u049d\3\2\2\2\u04a0\u04a4\t\3\2\2\u04a1\u04a3\7\66\2")
        buf.write("\2\u04a2\u04a1\3\2\2\2\u04a3\u04a6\3\2\2\2\u04a4\u04a2")
        buf.write("\3\2\2\2\u04a4\u04a5\3\2\2\2\u04a5\u04a7\3\2\2\2\u04a6")
        buf.write("\u04a4\3\2\2\2\u04a7\u04e5\5> \n\u04a8\u04ac\f\b\2\2\u04a9")
        buf.write("\u04ab\7\66\2\2\u04aa\u04a9\3\2\2\2\u04ab\u04ae\3\2\2")
        buf.write("\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04af")
        buf.write("\3\2\2\2\u04ae\u04ac\3\2\2\2\u04af\u04b3\t\4\2\2\u04b0")
        buf.write("\u04b2\7\66\2\2\u04b1\u04b0\3\2\2\2\u04b2\u04b5\3\2\2")
        buf.write("\2\u04b3\u04b1\3\2\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b6")
        buf.write("\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b6\u04e5\5> \t\u04b7\u04bb")
        buf.write("\f\7\2\2\u04b8\u04ba\7\66\2\2\u04b9\u04b8\3\2\2\2\u04ba")
        buf.write("\u04bd\3\2\2\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2")
        buf.write("\u04bc\u04be\3\2\2\2\u04bd\u04bb\3\2\2\2\u04be\u04c2\t")
        buf.write("\5\2\2\u04bf\u04c1\7\66\2\2\u04c0\u04bf\3\2\2\2\u04c1")
        buf.write("\u04c4\3\2\2\2\u04c2\u04c0\3\2\2\2\u04c2\u04c3\3\2\2\2")
        buf.write("\u04c3\u04c5\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c5\u04e5\5")
        buf.write("> \b\u04c6\u04ca\f\5\2\2\u04c7\u04c9\7\66\2\2\u04c8\u04c7")
        buf.write("\3\2\2\2\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca")
        buf.write("\u04cb\3\2\2\2\u04cb\u04cd\3\2\2\2\u04cc\u04ca\3\2\2\2")
        buf.write("\u04cd\u04d1\7\64\2\2\u04ce\u04d0\7\66\2\2\u04cf\u04ce")
        buf.write("\3\2\2\2\u04d0\u04d3\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1")
        buf.write("\u04d2\3\2\2\2\u04d2\u04d4\3\2\2\2\u04d3\u04d1\3\2\2\2")
        buf.write("\u04d4\u04e5\5> \6\u04d5\u04d9\f\4\2\2\u04d6\u04d8\7\66")
        buf.write("\2\2\u04d7\u04d6\3\2\2\2\u04d8\u04db\3\2\2\2\u04d9\u04d7")
        buf.write("\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04dc\3\2\2\2\u04db")
        buf.write("\u04d9\3\2\2\2\u04dc\u04e0\7\65\2\2\u04dd\u04df\7\66\2")
        buf.write("\2\u04de\u04dd\3\2\2\2\u04df\u04e2\3\2\2\2\u04e0\u04de")
        buf.write("\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e3\3\2\2\2\u04e2")
        buf.write("\u04e0\3\2\2\2\u04e3\u04e5\5> \5\u04e4\u0499\3\2\2\2\u04e4")
        buf.write("\u04a8\3\2\2\2\u04e4\u04b7\3\2\2\2\u04e4\u04c6\3\2\2\2")
        buf.write("\u04e4\u04d5\3\2\2\2\u04e5\u04e8\3\2\2\2\u04e6\u04e4\3")
        buf.write("\2\2\2\u04e6\u04e7\3\2\2\2\u04e7?\3\2\2\2\u04e8\u04e6")
        buf.write("\3\2\2\2\u04e9\u04ed\7:\2\2\u04ea\u04ed\7;\2\2\u04eb\u04ed")
        buf.write("\7B\2\2\u04ec\u04e9\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec")
        buf.write("\u04eb\3\2\2\2\u04edA\3\2\2\2\u00b2ELPV]cin\u0082\u0085")
        buf.write("\u008a\u0091\u0098\u009f\u00a5\u00ab\u00b1\u00b7\u00bd")
        buf.write("\u00c3\u00c9\u00cf\u00d7\u00df\u00e6\u00ed\u00f3\u00f8")
        buf.write("\u00fe\u0105\u010a\u010f\u0118\u011f\u012c\u0131\u0138")
        buf.write("\u013e\u0145\u014c\u0153\u015b\u0162\u0168\u016f\u0176")
        buf.write("\u017d\u0184\u018b\u0193\u019a\u01a0\u01a7\u01ae\u01b5")
        buf.write("\u01bc\u01c3\u01c9\u01d0\u01d7\u01de\u01e6\u01ed\u01f3")
        buf.write("\u01fa\u0202\u0209\u020f\u0216\u021d\u0224\u022c\u0233")
        buf.write("\u0239\u0240\u0247\u024e\u0256\u025d\u0263\u026a\u0271")
        buf.write("\u0278\u0280\u0287\u028e\u0295\u029c\u02a1\u02a8\u02af")
        buf.write("\u02b6\u02bd\u02c3\u02ca\u02d1\u02d8\u02df\u02e4\u02ea")
        buf.write("\u02f1\u02f7\u02fe\u0306\u030d\u0314\u031b\u0322\u0329")
        buf.write("\u0330\u0338\u033f\u0346\u034d\u0353\u035a\u0360\u0367")
        buf.write("\u036a\u0371\u0374\u037b\u0380\u0387\u038d\u0394\u039c")
        buf.write("\u03a3\u03a9\u03b0\u03b7\u03be\u03c6\u03cd\u03d3\u03da")
        buf.write("\u03e2\u03e9\u03ef\u03f6\u03fd\u0404\u040c\u0413\u0419")
        buf.write("\u0420\u0427\u042e\u0436\u043d\u0443\u044a\u0452\u0459")
        buf.write("\u045f\u0466\u046b\u0472\u0479\u0482\u048a\u0492\u0497")
        buf.write("\u049d\u04a4\u04ac\u04b3\u04bb\u04c2\u04ca\u04d1\u04d9")
        buf.write("\u04e0\u04e4\u04e6\u04ec")
        return buf.getvalue()


class GraphlyParser ( Parser ):

    grammarFileName = "Graphly.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'\n'", "'loop'", "'start'", "'until'", 
                     "'step'", "'then'", "'end'", "'check'", "'else'", "'point'", 
                     "':'", "','", "'vector'", "'segment'", "'circle'", 
                     "'polygon'", "'sphere'", "'plane'", "'['", "']'", "'group'", 
                     "'<'", "'>'", "'num'", "'canvas'", "'draw'", "'log'", 
                     "'save'", "'fill'", "'move'", "'place'", "'rotate'", 
                     "'scale'", "'assign'", "'('", "')'", "'^'", "'_'", 
                     "'~'", "'-'", "'*'", "'/'", "'%'", "'+'", "'<='", "'>='", 
                     "'='", "'!='", "'!'", "'&'", "'|'", "<INVALID>", "'\r'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'.'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "WS", "CR", "COM_SIGN", "MULTILINE_COM", "ITR", "FLT", 
                      "TEXT", "TYPE", "COLOR", "DOT", "DIGIT", "NONZERO", 
                      "NAME" ]

    RULE_program = 0
    RULE_instruction = 1
    RULE_block = 2
    RULE_loop = 3
    RULE_check = 4
    RULE_condition_block = 5
    RULE_shape = 6
    RULE_point = 7
    RULE_vector = 8
    RULE_segment = 9
    RULE_circle = 10
    RULE_polygon = 11
    RULE_sphere = 12
    RULE_box = 13
    RULE_plane = 14
    RULE_groupMember = 15
    RULE_transformable = 16
    RULE_group = 17
    RULE_num = 18
    RULE_canvas = 19
    RULE_draw = 20
    RULE_log = 21
    RULE_save = 22
    RULE_transformation = 23
    RULE_fill = 24
    RULE_move = 25
    RULE_place = 26
    RULE_rotate = 27
    RULE_scale = 28
    RULE_assign = 29
    RULE_expr = 30
    RULE_atom = 31

    ruleNames =  [ "program", "instruction", "block", "loop", "check", "condition_block", 
                   "shape", "point", "vector", "segment", "circle", "polygon", 
                   "sphere", "box", "plane", "groupMember", "transformable", 
                   "group", "num", "canvas", "draw", "log", "save", "transformation", 
                   "fill", "move", "place", "rotate", "scale", "assign", 
                   "expr", "atom" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    WS=52
    CR=53
    COM_SIGN=54
    MULTILINE_COM=55
    ITR=56
    FLT=57
    TEXT=58
    TYPE=59
    COLOR=60
    DOT=61
    DIGIT=62
    NONZERO=63
    NAME=64

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(GraphlyParser.EOF, 0)

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = GraphlyParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 78
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 67
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 64
                            self.match(GraphlyParser.WS) 
                        self.state = 69
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                    self.state = 70
                    self.instruction()
                    self.state = 72 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 71
                            self.match(GraphlyParser.T__0)

                        else:
                            raise NoViableAltException(self)
                        self.state = 74 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
             
                self.state = 80
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 84
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 81
                    self.match(GraphlyParser.WS) 
                self.state = 86
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 87
            self.instruction()
            self.state = 91
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 88
                self.match(GraphlyParser.WS)
                self.state = 93
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__0:
                self.state = 95 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 94
                        self.match(GraphlyParser.T__0)

                    else:
                        raise NoViableAltException(self)
                    self.state = 97 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

                self.state = 99
                self.instruction()
                self.state = 103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 100
                    self.match(GraphlyParser.WS)
                    self.state = 105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 110
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 111
            self.match(GraphlyParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def canvas(self):
            return self.getTypedRuleContext(GraphlyParser.CanvasContext,0)


        def plane(self):
            return self.getTypedRuleContext(GraphlyParser.PlaneContext,0)


        def shape(self):
            return self.getTypedRuleContext(GraphlyParser.ShapeContext,0)


        def num(self):
            return self.getTypedRuleContext(GraphlyParser.NumContext,0)


        def draw(self):
            return self.getTypedRuleContext(GraphlyParser.DrawContext,0)


        def transformation(self):
            return self.getTypedRuleContext(GraphlyParser.TransformationContext,0)


        def group(self):
            return self.getTypedRuleContext(GraphlyParser.GroupContext,0)


        def loop(self):
            return self.getTypedRuleContext(GraphlyParser.LoopContext,0)


        def check(self):
            return self.getTypedRuleContext(GraphlyParser.CheckContext,0)


        def assign(self):
            return self.getTypedRuleContext(GraphlyParser.AssignContext,0)


        def log(self):
            return self.getTypedRuleContext(GraphlyParser.LogContext,0)


        def save(self):
            return self.getTypedRuleContext(GraphlyParser.SaveContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)




    def instruction(self):

        localctx = GraphlyParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_instruction)
        try:
            self.state = 131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 113
                self.canvas()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 114
                self.plane()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 115
                self.shape()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 116
                self.num()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 117
                self.draw()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 118
                self.transformation()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 119
                self.group()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 120
                self.loop()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 121
                self.check()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 122
                self.assign()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 123
                self.log()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 124
                self.save()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 125
                        self.match(GraphlyParser.WS) 
                    self.state = 130
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.InstructionContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.InstructionContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = GraphlyParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 150
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 136
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 133
                            self.match(GraphlyParser.WS) 
                        self.state = 138
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                    self.state = 139
                    self.instruction()
                    self.state = 143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==GraphlyParser.WS:
                        self.state = 140
                        self.match(GraphlyParser.WS)
                        self.state = 145
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 146
                    self.match(GraphlyParser.T__0) 
                self.state = 152
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # Token
            self.starting = None # ExprContext
            self.until = None # ExprContext
            self.step = None # ExprContext

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoop" ):
                listener.enterLoop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoop" ):
                listener.exitLoop(self)




    def loop(self):

        localctx = GraphlyParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self.match(GraphlyParser.T__1)
            self.state = 155 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 154
                self.match(GraphlyParser.WS)
                self.state = 157 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 159
            localctx.name = self.match(GraphlyParser.NAME)
            self.state = 161 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 160
                self.match(GraphlyParser.WS)
                self.state = 163 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 165
            self.match(GraphlyParser.T__2)
            self.state = 167 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 166
                self.match(GraphlyParser.WS)
                self.state = 169 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 171
            localctx.starting = self.expr(0)
            self.state = 173 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 172
                self.match(GraphlyParser.WS)
                self.state = 175 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 177
            self.match(GraphlyParser.T__3)
            self.state = 179 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 178
                self.match(GraphlyParser.WS)
                self.state = 181 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 183
            localctx.until = self.expr(0)
            self.state = 185 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 184
                self.match(GraphlyParser.WS)
                self.state = 187 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 189
            self.match(GraphlyParser.T__4)
            self.state = 191 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 190
                self.match(GraphlyParser.WS)
                self.state = 193 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 195
            localctx.step = self.expr(0)
            self.state = 197 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 196
                self.match(GraphlyParser.WS)
                self.state = 199 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 201
            self.match(GraphlyParser.T__5)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 202
                self.match(GraphlyParser.WS)
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 208
            self.match(GraphlyParser.T__0)
            self.state = 209
            self.block()
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 210
                self.match(GraphlyParser.WS)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def condition_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.Condition_blockContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.Condition_blockContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheck" ):
                listener.enterCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheck" ):
                listener.exitCheck(self)




    def check(self):

        localctx = GraphlyParser.CheckContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_check)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 218
                self.match(GraphlyParser.WS)
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(GraphlyParser.T__7)
            self.state = 226 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 225
                self.match(GraphlyParser.WS)
                self.state = 228 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 230
            self.condition_block()
            self.state = 246
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 231
                    self.match(GraphlyParser.T__8)
                    self.state = 233 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 232
                        self.match(GraphlyParser.WS)
                        self.state = 235 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 237
                    self.match(GraphlyParser.T__7)
                    self.state = 239 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 238
                        self.match(GraphlyParser.WS)
                        self.state = 241 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==GraphlyParser.WS):
                            break

                    self.state = 243
                    self.condition_block() 
                self.state = 248
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 249
                    self.match(GraphlyParser.WS) 
                self.state = 254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==GraphlyParser.T__8:
                self.state = 255
                self.match(GraphlyParser.T__8)
                self.state = 257 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 256
                    self.match(GraphlyParser.WS)
                    self.state = 259 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 261
                self.match(GraphlyParser.T__5)
                self.state = 262
                self.match(GraphlyParser.T__0)
                self.state = 263
                self.block()


            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 266
                self.match(GraphlyParser.WS)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(GraphlyParser.T__6)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Condition_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def block(self):
            return self.getTypedRuleContext(GraphlyParser.BlockContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_condition_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition_block" ):
                listener.enterCondition_block(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition_block" ):
                listener.exitCondition_block(self)




    def condition_block(self):

        localctx = GraphlyParser.Condition_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_condition_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.expr(0)
            self.state = 276 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 275
                self.match(GraphlyParser.WS)
                self.state = 278 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 280
            self.match(GraphlyParser.T__5)
            self.state = 281
            self.match(GraphlyParser.T__0)
            self.state = 285
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 282
                    self.match(GraphlyParser.WS) 
                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 288
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShapeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def point(self):
            return self.getTypedRuleContext(GraphlyParser.PointContext,0)


        def vector(self):
            return self.getTypedRuleContext(GraphlyParser.VectorContext,0)


        def segment(self):
            return self.getTypedRuleContext(GraphlyParser.SegmentContext,0)


        def circle(self):
            return self.getTypedRuleContext(GraphlyParser.CircleContext,0)


        def polygon(self):
            return self.getTypedRuleContext(GraphlyParser.PolygonContext,0)


        def sphere(self):
            return self.getTypedRuleContext(GraphlyParser.SphereContext,0)


        def box(self):
            return self.getTypedRuleContext(GraphlyParser.BoxContext,0)


        def plane(self):
            return self.getTypedRuleContext(GraphlyParser.PlaneContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_shape

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShape" ):
                listener.enterShape(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShape" ):
                listener.exitShape(self)




    def shape(self):

        localctx = GraphlyParser.ShapeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_shape)
        try:
            self.state = 298
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.point()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.vector()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.segment()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 293
                self.circle()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 294
                self.polygon()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 295
                self.sphere()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 296
                self.box()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 297
                self.plane()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_point

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPoint" ):
                listener.enterPoint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPoint" ):
                listener.exitPoint(self)




    def point(self):

        localctx = GraphlyParser.PointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_point)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 300
                self.match(GraphlyParser.WS)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self.match(GraphlyParser.T__9)
            self.state = 308 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 307
                self.match(GraphlyParser.WS)
                self.state = 310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 312
            self.match(GraphlyParser.NAME)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 313
                self.match(GraphlyParser.WS)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 319
            self.match(GraphlyParser.T__10)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 320
                self.match(GraphlyParser.WS)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 326
            localctx.x = self.expr(0)
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 327
                self.match(GraphlyParser.WS)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 333
            self.match(GraphlyParser.T__11)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 334
                self.match(GraphlyParser.WS)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 340
            localctx.y = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext
            self.z = None # ExprContext

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_vector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector" ):
                listener.enterVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector" ):
                listener.exitVector(self)




    def vector(self):

        localctx = GraphlyParser.VectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_vector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 342
                self.match(GraphlyParser.WS)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 348
            self.match(GraphlyParser.T__12)
            self.state = 350 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 349
                self.match(GraphlyParser.WS)
                self.state = 352 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 354
            self.match(GraphlyParser.NAME)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 355
                self.match(GraphlyParser.WS)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(GraphlyParser.T__10)
            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 362
                self.match(GraphlyParser.WS)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 368
            localctx.x = self.expr(0)
            self.state = 372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 369
                self.match(GraphlyParser.WS)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 375
            self.match(GraphlyParser.T__11)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 376
                self.match(GraphlyParser.WS)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 382
            localctx.y = self.expr(0)
            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 383
                self.match(GraphlyParser.WS)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 389
            self.match(GraphlyParser.T__11)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 390
                self.match(GraphlyParser.WS)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            localctx.z = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SegmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_segment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSegment" ):
                listener.enterSegment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSegment" ):
                listener.exitSegment(self)




    def segment(self):

        localctx = GraphlyParser.SegmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_segment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 398
                self.match(GraphlyParser.WS)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(GraphlyParser.T__13)
            self.state = 406 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 405
                self.match(GraphlyParser.WS)
                self.state = 408 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 410
            self.match(GraphlyParser.NAME)
            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 411
                self.match(GraphlyParser.WS)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 417
            self.match(GraphlyParser.T__10)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 418
                self.match(GraphlyParser.WS)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(GraphlyParser.NAME)
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 425
                self.match(GraphlyParser.WS)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.match(GraphlyParser.T__11)
            self.state = 433 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 432
                self.match(GraphlyParser.WS)
                self.state = 435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 437
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CircleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_circle

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCircle" ):
                listener.enterCircle(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCircle" ):
                listener.exitCircle(self)




    def circle(self):

        localctx = GraphlyParser.CircleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_circle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 439
                self.match(GraphlyParser.WS)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 445
            self.match(GraphlyParser.T__14)
            self.state = 447 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 446
                self.match(GraphlyParser.WS)
                self.state = 449 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 451
            self.match(GraphlyParser.NAME)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 452
                self.match(GraphlyParser.WS)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 458
            self.match(GraphlyParser.T__10)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 459
                self.match(GraphlyParser.WS)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 465
            self.match(GraphlyParser.NAME)
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 466
                self.match(GraphlyParser.WS)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 472
            self.match(GraphlyParser.T__11)
            self.state = 476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 473
                self.match(GraphlyParser.WS)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 479
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PolygonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_polygon

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPolygon" ):
                listener.enterPolygon(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPolygon" ):
                listener.exitPolygon(self)




    def polygon(self):

        localctx = GraphlyParser.PolygonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_polygon)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 481
                self.match(GraphlyParser.WS)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self.match(GraphlyParser.T__15)
            self.state = 489 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 488
                self.match(GraphlyParser.WS)
                self.state = 491 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 493
            self.match(GraphlyParser.NAME)
            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 494
                self.match(GraphlyParser.WS)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 500
            self.match(GraphlyParser.T__10)
            self.state = 504
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 501
                self.match(GraphlyParser.WS)
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 507
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SphereContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_sphere

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSphere" ):
                listener.enterSphere(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSphere" ):
                listener.exitSphere(self)




    def sphere(self):

        localctx = GraphlyParser.SphereContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_sphere)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 509
                self.match(GraphlyParser.WS)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 515
            self.match(GraphlyParser.T__16)
            self.state = 517 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 516
                self.match(GraphlyParser.WS)
                self.state = 519 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 521
            self.match(GraphlyParser.NAME)
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 522
                self.match(GraphlyParser.WS)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 528
            self.match(GraphlyParser.T__10)
            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 529
                self.match(GraphlyParser.WS)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 535
            self.match(GraphlyParser.NAME)
            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 536
                self.match(GraphlyParser.WS)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 542
            self.match(GraphlyParser.T__11)
            self.state = 546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 543
                self.match(GraphlyParser.WS)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 549
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_box

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBox" ):
                listener.enterBox(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBox" ):
                listener.exitBox(self)




    def box(self):

        localctx = GraphlyParser.BoxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_box)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 551
                self.match(GraphlyParser.WS)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.match(GraphlyParser.T__16)
            self.state = 559 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 558
                self.match(GraphlyParser.WS)
                self.state = 561 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 563
            self.match(GraphlyParser.NAME)
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 564
                self.match(GraphlyParser.WS)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 570
            self.match(GraphlyParser.T__10)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 571
                self.match(GraphlyParser.WS)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 577
            self.match(GraphlyParser.NAME)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 578
                self.match(GraphlyParser.WS)
                self.state = 583
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 584
            self.match(GraphlyParser.T__11)
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 585
                self.match(GraphlyParser.WS)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 591
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaneContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_plane

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane" ):
                listener.enterPlane(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane" ):
                listener.exitPlane(self)




    def plane(self):

        localctx = GraphlyParser.PlaneContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_plane)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 593
                self.match(GraphlyParser.WS)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 599
            self.match(GraphlyParser.T__17)
            self.state = 601 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 600
                self.match(GraphlyParser.WS)
                self.state = 603 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 605
            self.match(GraphlyParser.NAME)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 606
                self.match(GraphlyParser.WS)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 612
            self.match(GraphlyParser.T__10)
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 613
                self.match(GraphlyParser.WS)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 619
            self.match(GraphlyParser.NAME)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 620
                self.match(GraphlyParser.WS)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 626
            self.match(GraphlyParser.T__11)
            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 627
                self.match(GraphlyParser.WS)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 633
            self.match(GraphlyParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_groupMember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupMember" ):
                listener.enterGroupMember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupMember" ):
                listener.exitGroupMember(self)




    def groupMember(self):

        localctx = GraphlyParser.GroupMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_groupMember)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 635
                self.match(GraphlyParser.WS)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self.match(GraphlyParser.NAME)
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 642
                self.match(GraphlyParser.WS)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 648
            self.match(GraphlyParser.T__18)
            self.state = 652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 649
                self.match(GraphlyParser.WS)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 655
            self.expr(0)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 656
                self.match(GraphlyParser.WS)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 662
            self.match(GraphlyParser.T__19)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def groupMember(self):
            return self.getTypedRuleContext(GraphlyParser.GroupMemberContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformable" ):
                listener.enterTransformable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformable" ):
                listener.exitTransformable(self)




    def transformable(self):

        localctx = GraphlyParser.TransformableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_transformable)
        try:
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.match(GraphlyParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.groupMember()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(GraphlyParser.TYPE, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.NAME)
            else:
                return self.getToken(GraphlyParser.NAME, i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup" ):
                listener.enterGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup" ):
                listener.exitGroup(self)




    def group(self):

        localctx = GraphlyParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 668
                self.match(GraphlyParser.WS)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 674
            self.match(GraphlyParser.T__20)
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 675
                self.match(GraphlyParser.WS)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 681
            self.match(GraphlyParser.T__21)
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 682
                self.match(GraphlyParser.WS)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 688
            self.match(GraphlyParser.TYPE)
            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 689
                self.match(GraphlyParser.WS)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 695
            self.match(GraphlyParser.T__22)
            self.state = 697 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 696
                self.match(GraphlyParser.WS)
                self.state = 699 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 701
            self.match(GraphlyParser.NAME)
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 702
                self.match(GraphlyParser.WS)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 708
            self.match(GraphlyParser.T__10)
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 709
                self.match(GraphlyParser.WS)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 715
            self.match(GraphlyParser.NAME)
            self.state = 719
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 716
                    self.match(GraphlyParser.WS) 
                self.state = 721
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

            self.state = 738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.T__11:
                self.state = 722
                self.match(GraphlyParser.T__11)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 723
                    self.match(GraphlyParser.WS)
                    self.state = 728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 729
                self.match(GraphlyParser.NAME)
                self.state = 733
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 730
                        self.match(GraphlyParser.WS) 
                    self.state = 735
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_num

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNum" ):
                listener.enterNum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNum" ):
                listener.exitNum(self)




    def num(self):

        localctx = GraphlyParser.NumContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_num)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 741
                self.match(GraphlyParser.WS)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 747
            self.match(GraphlyParser.T__23)
            self.state = 749 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 748
                self.match(GraphlyParser.WS)
                self.state = 751 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==GraphlyParser.WS):
                    break

            self.state = 753
            self.match(GraphlyParser.NAME)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 754
                self.match(GraphlyParser.WS)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 760
            self.match(GraphlyParser.T__10)
            self.state = 764
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 761
                self.match(GraphlyParser.WS)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 767
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CanvasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.x = None # ExprContext
            self.y = None # ExprContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_canvas

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCanvas" ):
                listener.enterCanvas(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCanvas" ):
                listener.exitCanvas(self)




    def canvas(self):

        localctx = GraphlyParser.CanvasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_canvas)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 769
                self.match(GraphlyParser.WS)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self.match(GraphlyParser.T__24)
            self.state = 779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 776
                self.match(GraphlyParser.WS)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 782
            self.match(GraphlyParser.T__10)
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 783
                self.match(GraphlyParser.WS)
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 789
            localctx.x = self.expr(0)
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 790
                self.match(GraphlyParser.WS)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 796
            self.match(GraphlyParser.T__11)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 797
                self.match(GraphlyParser.WS)
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 803
            localctx.y = self.expr(0)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 804
                self.match(GraphlyParser.WS)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 810
            self.match(GraphlyParser.T__11)
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 811
                self.match(GraphlyParser.WS)
                self.state = 816
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 817
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DrawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_draw

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDraw" ):
                listener.enterDraw(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDraw" ):
                listener.exitDraw(self)




    def draw(self):

        localctx = GraphlyParser.DrawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_draw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 819
                self.match(GraphlyParser.WS)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 825
            self.match(GraphlyParser.T__25)
            self.state = 827 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 826
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 829 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 831
            localctx.arg = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_log

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExprLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # ExprContext
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprLog" ):
                listener.enterExprLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprLog" ):
                listener.exitExprLog(self)


    class TextLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(GraphlyParser.TEXT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTextLog" ):
                listener.enterTextLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTextLog" ):
                listener.exitTextLog(self)


    class ShapeLogContext(LogContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.LogContext
            super().__init__(parser)
            self.arg = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShapeLog" ):
                listener.enterShapeLog(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShapeLog" ):
                listener.exitShapeLog(self)



    def log(self):

        localctx = GraphlyParser.LogContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_log)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.ShapeLogContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 833
                    self.match(GraphlyParser.WS)
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 839
                self.match(GraphlyParser.T__26)
                self.state = 841 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 840
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 843 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                self.state = 845
                localctx.arg = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.ExprLogContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 846
                    self.match(GraphlyParser.WS)
                    self.state = 851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 852
                self.match(GraphlyParser.T__26)
                self.state = 854 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 853
                    self.match(GraphlyParser.WS)
                    self.state = 856 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 858
                localctx.arg = self.expr(0)
                pass

            elif la_ == 3:
                localctx = GraphlyParser.TextLogContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 859
                    self.match(GraphlyParser.WS)
                    self.state = 864
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 865
                self.match(GraphlyParser.T__26)
                self.state = 867 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 866
                    self.match(GraphlyParser.WS)
                    self.state = 869 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 871
                self.match(GraphlyParser.TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_save

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleSaveContext(SaveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.SaveContext
            super().__init__(parser)
            self.copyFrom(ctx)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSave" ):
                listener.enterSimpleSave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSave" ):
                listener.exitSimpleSave(self)


    class NamedSaveContext(SaveContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.SaveContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TEXT(self):
            return self.getToken(GraphlyParser.TEXT, 0)
        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedSave" ):
                listener.enterNamedSave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedSave" ):
                listener.exitNamedSave(self)



    def save(self):

        localctx = GraphlyParser.SaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_save)
        self._la = 0 # Token type
        try:
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.SimpleSaveContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(GraphlyParser.T__27)
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NamedSaveContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 875
                self.match(GraphlyParser.T__27)
                self.state = 877 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 876
                    self.match(GraphlyParser.WS)
                    self.state = 879 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==GraphlyParser.WS):
                        break

                self.state = 881
                self.match(GraphlyParser.TEXT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fill(self):
            return self.getTypedRuleContext(GraphlyParser.FillContext,0)


        def move(self):
            return self.getTypedRuleContext(GraphlyParser.MoveContext,0)


        def place(self):
            return self.getTypedRuleContext(GraphlyParser.PlaceContext,0)


        def rotate(self):
            return self.getTypedRuleContext(GraphlyParser.RotateContext,0)


        def scale(self):
            return self.getTypedRuleContext(GraphlyParser.ScaleContext,0)


        def getRuleIndex(self):
            return GraphlyParser.RULE_transformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransformation" ):
                listener.enterTransformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransformation" ):
                listener.exitTransformation(self)




    def transformation(self):

        localctx = GraphlyParser.TransformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_transformation)
        try:
            self.state = 889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.fill()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 885
                self.move()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.place()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 887
                self.rotate()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 888
                self.scale()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FillContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext

        def COLOR(self):
            return self.getToken(GraphlyParser.COLOR, 0)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_fill

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFill" ):
                listener.enterFill(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFill" ):
                listener.exitFill(self)




    def fill(self):

        localctx = GraphlyParser.FillContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fill)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 891
                self.match(GraphlyParser.WS)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 897
            self.match(GraphlyParser.T__28)
            self.state = 899 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 898
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 901 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

            self.state = 903
            localctx.arg = self.transformable()
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 904
                self.match(GraphlyParser.WS)
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 910
            self.match(GraphlyParser.T__10)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 911
                self.match(GraphlyParser.WS)
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 917
            self.match(GraphlyParser.COLOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg = None # TransformableContext
            self.dx = None # ExprContext
            self.dy = None # ExprContext

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_move

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMove" ):
                listener.enterMove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMove" ):
                listener.exitMove(self)




    def move(self):

        localctx = GraphlyParser.MoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_move)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 919
                self.match(GraphlyParser.WS)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 925
            self.match(GraphlyParser.T__29)
            self.state = 927 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 926
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 929 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,127,self._ctx)

            self.state = 931
            localctx.arg = self.transformable()
            self.state = 935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 932
                self.match(GraphlyParser.WS)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 938
            self.match(GraphlyParser.T__10)
            self.state = 942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 939
                self.match(GraphlyParser.WS)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 945
            localctx.dx = self.expr(0)
            self.state = 949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 946
                self.match(GraphlyParser.WS)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 952
            self.match(GraphlyParser.T__11)
            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 953
                self.match(GraphlyParser.WS)
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 959
            localctx.dy = self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PlaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_place

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlace" ):
                listener.enterPlace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlace" ):
                listener.exitPlace(self)




    def place(self):

        localctx = GraphlyParser.PlaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_place)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 961
                self.match(GraphlyParser.WS)
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 967
            self.match(GraphlyParser.T__30)
            self.state = 969 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 968
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 971 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,133,self._ctx)

            self.state = 973
            localctx.arg1 = self.transformable()
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 974
                self.match(GraphlyParser.WS)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 980
            self.match(GraphlyParser.T__10)
            self.state = 984
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 981
                    self.match(GraphlyParser.WS) 
                self.state = 986
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 987
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RotateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.angle = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_rotate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRotate" ):
                listener.enterRotate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRotate" ):
                listener.exitRotate(self)




    def rotate(self):

        localctx = GraphlyParser.RotateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_rotate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 989
                self.match(GraphlyParser.WS)
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 995
            self.match(GraphlyParser.T__31)
            self.state = 997 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 996
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 999 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1001
            localctx.arg1 = self.transformable()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1002
                self.match(GraphlyParser.WS)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1008
            self.match(GraphlyParser.T__10)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1009
                self.match(GraphlyParser.WS)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1015
            localctx.angle = self.expr(0)
            self.state = 1019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1016
                self.match(GraphlyParser.WS)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1022
            self.match(GraphlyParser.T__11)
            self.state = 1026
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,141,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1023
                    self.match(GraphlyParser.WS) 
                self.state = 1028
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,141,self._ctx)

            self.state = 1029
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScaleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.arg1 = None # TransformableContext
            self.k = None # ExprContext
            self.arg2 = None # TransformableContext

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)


        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)


        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def getRuleIndex(self):
            return GraphlyParser.RULE_scale

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScale" ):
                listener.enterScale(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScale" ):
                listener.exitScale(self)




    def scale(self):

        localctx = GraphlyParser.ScaleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_scale)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1031
                self.match(GraphlyParser.WS)
                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1037
            self.match(GraphlyParser.T__32)
            self.state = 1039 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1038
                    self.match(GraphlyParser.WS)

                else:
                    raise NoViableAltException(self)
                self.state = 1041 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

            self.state = 1043
            localctx.arg1 = self.transformable()
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1044
                self.match(GraphlyParser.WS)
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1050
            self.match(GraphlyParser.T__10)
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1051
                self.match(GraphlyParser.WS)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1057
            localctx.k = self.expr(0)
            self.state = 1061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==GraphlyParser.WS:
                self.state = 1058
                self.match(GraphlyParser.WS)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1064
            self.match(GraphlyParser.T__11)
            self.state = 1068
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,147,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1065
                    self.match(GraphlyParser.WS) 
                self.state = 1070
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,147,self._ctx)

            self.state = 1071
            localctx.arg2 = self.transformable()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_assign

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NumAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # ExprContext
            self.copyFrom(ctx)

        def transformable(self):
            return self.getTypedRuleContext(GraphlyParser.TransformableContext,0)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumAssign" ):
                listener.enterNumAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumAssign" ):
                listener.exitNumAssign(self)


    class CopyAssignContext(AssignContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AssignContext
            super().__init__(parser)
            self.arg1 = None # TransformableContext
            self.arg2 = None # TransformableContext
            self.copyFrom(ctx)

        def transformable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.TransformableContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.TransformableContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyAssign" ):
                listener.enterCopyAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyAssign" ):
                listener.exitCopyAssign(self)



    def assign(self):

        localctx = GraphlyParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_assign)
        self._la = 0 # Token type
        try:
            self.state = 1129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                localctx = GraphlyParser.CopyAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1073
                    self.match(GraphlyParser.WS)
                    self.state = 1078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1079
                self.match(GraphlyParser.T__33)
                self.state = 1081 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1080
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1083 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

                self.state = 1085
                localctx.arg1 = self.transformable()
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1086
                    self.match(GraphlyParser.WS)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1092
                self.match(GraphlyParser.T__10)
                self.state = 1096
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1093
                        self.match(GraphlyParser.WS) 
                    self.state = 1098
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                self.state = 1099
                localctx.arg2 = self.transformable()
                pass

            elif la_ == 2:
                localctx = GraphlyParser.NumAssignContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1101
                    self.match(GraphlyParser.WS)
                    self.state = 1106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1107
                self.match(GraphlyParser.T__33)
                self.state = 1109 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1108
                        self.match(GraphlyParser.WS)

                    else:
                        raise NoViableAltException(self)
                    self.state = 1111 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,153,self._ctx)

                self.state = 1113
                localctx.arg1 = self.transformable()
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1114
                    self.match(GraphlyParser.WS)
                    self.state = 1119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1120
                self.match(GraphlyParser.T__10)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1121
                    self.match(GraphlyParser.WS)
                    self.state = 1126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1127
                localctx.arg2 = self.expr(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_expr

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MinusOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMinusOpExpr" ):
                listener.enterMinusOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMinusOpExpr" ):
                listener.exitMinusOpExpr(self)


    class RoundingOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoundingOpExpr" ):
                listener.enterRoundingOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoundingOpExpr" ):
                listener.exitRoundingOpExpr(self)


    class BooleanOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanOpExpr" ):
                listener.enterBooleanOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanOpExpr" ):
                listener.exitBooleanOpExpr(self)


    class ArithmeticOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.left = None # ExprContext
            self.op = None # Token
            self.right = None # ExprContext
            self.copyFrom(ctx)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(GraphlyParser.ExprContext)
            else:
                return self.getTypedRuleContext(GraphlyParser.ExprContext,i)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmeticOpExpr" ):
                listener.enterArithmeticOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmeticOpExpr" ):
                listener.exitArithmeticOpExpr(self)


    class NegationOpExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationOpExpr" ):
                listener.enterNegationOpExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationOpExpr" ):
                listener.exitNegationOpExpr(self)


    class AtomExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def atom(self):
            return self.getTypedRuleContext(GraphlyParser.AtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomExpr" ):
                listener.enterAtomExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomExpr" ):
                listener.exitAtomExpr(self)


    class ParenExprContext(ExprContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.ExprContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expr(self):
            return self.getTypedRuleContext(GraphlyParser.ExprContext,0)

        def WS(self, i:int=None):
            if i is None:
                return self.getTokens(GraphlyParser.WS)
            else:
                return self.getToken(GraphlyParser.WS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenExpr" ):
                listener.enterParenExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenExpr" ):
                listener.exitParenExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = GraphlyParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.T__34]:
                localctx = GraphlyParser.ParenExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 1132
                self.match(GraphlyParser.T__34)
                self.state = 1136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1133
                    self.match(GraphlyParser.WS)
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1139
                self.expr(0)
                self.state = 1143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1140
                    self.match(GraphlyParser.WS)
                    self.state = 1145
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1146
                self.match(GraphlyParser.T__35)
                pass
            elif token in [GraphlyParser.T__36, GraphlyParser.T__37, GraphlyParser.T__38]:
                localctx = GraphlyParser.RoundingOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1148
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__36) | (1 << GraphlyParser.T__37) | (1 << GraphlyParser.T__38))) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1149
                    self.match(GraphlyParser.WS)
                    self.state = 1154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1155
                self.expr(9)
                pass
            elif token in [GraphlyParser.T__39]:
                localctx = GraphlyParser.MinusOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1156
                self.match(GraphlyParser.T__39)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1157
                    self.match(GraphlyParser.WS)
                    self.state = 1162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1163
                self.expr(8)
                pass
            elif token in [GraphlyParser.T__48]:
                localctx = GraphlyParser.NegationOpExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1164
                self.match(GraphlyParser.T__48)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==GraphlyParser.WS:
                    self.state = 1165
                    self.match(GraphlyParser.WS)
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1171
                self.expr(4)
                pass
            elif token in [GraphlyParser.ITR, GraphlyParser.FLT, GraphlyParser.NAME]:
                localctx = GraphlyParser.AtomExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 1172
                self.atom()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,174,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1250
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                    if la_ == 1:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1175
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1179
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1176
                            self.match(GraphlyParser.WS)
                            self.state = 1181
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1182
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__40) | (1 << GraphlyParser.T__41) | (1 << GraphlyParser.T__42))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1186
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1183
                            self.match(GraphlyParser.WS)
                            self.state = 1188
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1189
                        localctx.right = self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = GraphlyParser.ArithmeticOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1190
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 1194
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1191
                            self.match(GraphlyParser.WS)
                            self.state = 1196
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1197
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==GraphlyParser.T__39 or _la==GraphlyParser.T__43):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1198
                            self.match(GraphlyParser.WS)
                            self.state = 1203
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1204
                        localctx.right = self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1205
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1209
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1206
                            self.match(GraphlyParser.WS)
                            self.state = 1211
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1212
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << GraphlyParser.T__21) | (1 << GraphlyParser.T__22) | (1 << GraphlyParser.T__44) | (1 << GraphlyParser.T__45) | (1 << GraphlyParser.T__46) | (1 << GraphlyParser.T__47))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1216
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1213
                            self.match(GraphlyParser.WS)
                            self.state = 1218
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1219
                        localctx.right = self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1220
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1224
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1221
                            self.match(GraphlyParser.WS)
                            self.state = 1226
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1227
                        localctx.op = self.match(GraphlyParser.T__49)
                        self.state = 1231
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1228
                            self.match(GraphlyParser.WS)
                            self.state = 1233
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1234
                        localctx.right = self.expr(4)
                        pass

                    elif la_ == 5:
                        localctx = GraphlyParser.BooleanOpExprContext(self, GraphlyParser.ExprContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1235
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1239
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1236
                            self.match(GraphlyParser.WS)
                            self.state = 1241
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1242
                        localctx.op = self.match(GraphlyParser.T__50)
                        self.state = 1246
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==GraphlyParser.WS:
                            self.state = 1243
                            self.match(GraphlyParser.WS)
                            self.state = 1248
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1249
                        localctx.right = self.expr(3)
                        pass

             
                self.state = 1254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,174,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return GraphlyParser.RULE_atom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class VarAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NAME(self):
            return self.getToken(GraphlyParser.NAME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarAtom" ):
                listener.enterVarAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarAtom" ):
                listener.exitVarAtom(self)


    class IntAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ITR(self):
            return self.getToken(GraphlyParser.ITR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntAtom" ):
                listener.enterIntAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntAtom" ):
                listener.exitIntAtom(self)


    class FltAtomContext(AtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a GraphlyParser.AtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FLT(self):
            return self.getToken(GraphlyParser.FLT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFltAtom" ):
                listener.enterFltAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFltAtom" ):
                listener.exitFltAtom(self)



    def atom(self):

        localctx = GraphlyParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_atom)
        try:
            self.state = 1258
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [GraphlyParser.ITR]:
                localctx = GraphlyParser.IntAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1255
                self.match(GraphlyParser.ITR)
                pass
            elif token in [GraphlyParser.FLT]:
                localctx = GraphlyParser.FltAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1256
                self.match(GraphlyParser.FLT)
                pass
            elif token in [GraphlyParser.NAME]:
                localctx = GraphlyParser.VarAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1257
                self.match(GraphlyParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[30] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         




